import * as persist from 'node-persist';
import { ErrorDescription, ErrorDescriptionSymbol, HasErrorDescription } from '../../util/errors.js';
import { SavedToken } from './coral.js';
export declare const SHOULD_LIMIT_USE: boolean;
export declare const LIMIT_REQUESTS = 4;
export declare const LIMIT_PERIOD: number;
export declare function checkUseLimit(storage: persist.LocalStorage, key: string, user: string, 
/** Set to false to count the attempt but ignore the limit */ ratelimit?: boolean, limits?: [requests: number, period_ms: number]): Promise<RateLimitAttempt>;
declare class RateLimitAttempt {
    readonly storage: persist.LocalStorage;
    readonly key: string;
    readonly user: string;
    readonly time: number;
    constructor(storage: persist.LocalStorage, key: string, user: string, time?: number);
    recordError(err: Error | unknown): Promise<void>;
    recordErrorData(error_description: string, data: unknown, error_description_data?: ErrorDescription | null): Promise<void>;
}
interface SavedRateLimitAttempt {
    time: number;
    error_description?: string;
    error_description_data?: {
        type: string;
        message: string;
    };
    error_data?: unknown;
}
export declare class RateLimitError extends Error implements HasErrorDescription {
    readonly key: string;
    readonly attempts: SavedRateLimitAttempt[];
    constructor(message: string, key: string, attempts: SavedRateLimitAttempt[]);
    get [ErrorDescriptionSymbol](): ErrorDescription;
}
export declare function checkMembershipActive(data: SavedToken): void;
export declare class MembershipRequiredError extends Error implements HasErrorDescription {
    get [ErrorDescriptionSymbol](): ErrorDescription;
}
export {};
