/// <reference types="node" resolution-mode="require"/>
import persist from 'node-persist';
import { CoralApiInterface } from '../api/coral.js';
import { ActiveEvent, Announcements, CurrentUser, Friend, Presence, WebServices, CoralError } from '../api/coral-types.js';
import { ErrorResponse } from '../api/util.js';
import { SavedToken } from './auth/coral.js';
import { SplatNet2RecordsMonitor } from './splatnet2/monitor.js';
import Loop, { LoopResult } from '../util/loop.js';
import { CoralUser } from './users.js';
export declare class ZncNotifications extends Loop {
    storage: persist.LocalStorage;
    token: string;
    nso: CoralApiInterface;
    data: Omit<SavedToken, 'expires_at'>;
    user?: CoralUser<CoralApiInterface> | undefined;
    notifications: NotificationManager;
    splatnet2_monitors: Map<string, EmbeddedSplatNet2Monitor | (() => Promise<EmbeddedSplatNet2Monitor>)>;
    user_notifications: boolean;
    friend_notifications: boolean;
    update_interval: number;
    constructor(storage: persist.LocalStorage, token: string, nso: CoralApiInterface, data: Omit<SavedToken, 'expires_at'>, user?: CoralUser<CoralApiInterface> | undefined);
    fetch(req: ('announcements' | 'friends' | {
        friend: string;
        presence?: boolean;
    } | 'webservices' | 'event' | 'user' | null)[]): Promise<Partial<{
        announcements: Announcements;
        friends: Friend[];
        webservices: WebServices;
        activeevent: ActiveEvent;
        user: CurrentUser;
    }>>;
    init(): Promise<LoopResult>;
    updateFriendsStatusForNotifications(friends: (CurrentUser | Friend)[], naid?: string, initialRun?: boolean): Promise<void>;
    updatePresenceForNotifications(user: CurrentUser | undefined, friends: Friend[] | undefined, naid?: string, initialRun?: boolean): Promise<void>;
    updatePresenceForSplatNet2Monitors(friends: (CurrentUser | Friend)[]): Promise<void>;
    updatePresenceForSplatNet2Monitor(presence: Presence, nsa_id: string, name?: string): Promise<void>;
    update(): Promise<void>;
    handleError(err: ErrorResponse<CoralError> | NodeJS.ErrnoException): Promise<LoopResult>;
}
export declare class NotificationManager {
    onPresenceUpdated?(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, type?: PresenceEvent, naid?: string, ir?: boolean): void;
    onFriendOnline?(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onFriendOffline?(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onFriendPlayingChangeTitle?(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onFriendTitleStateChange?(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onlinefriends: Map<string, (CurrentUser | Friend)[]>;
    accounts: Map<string, string>;
    updateFriendsStatusForNotifications(friends: (CurrentUser | Friend)[], naid: string, initialRun?: boolean): void;
    removeAccount(naid: string): void;
}
export declare enum PresenceEvent {
    STATE_CHANGE = 0,
    TITLE_CHANGE = 1,
    TITLE_STATE_CHANGE = 2
}
export declare class EmbeddedSplatNet2Monitor extends SplatNet2RecordsMonitor {
    static title_ids: string[];
    enable(): void;
    disable(): void;
    get enabled(): boolean;
    private _running;
    private _run;
}
