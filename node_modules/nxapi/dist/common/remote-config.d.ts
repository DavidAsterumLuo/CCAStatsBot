export declare enum RemoteConfigMode {
    /** Always use local configuration */
    DISABLE = 0,
    /** Always use remote configuration */
    REQUIRE = 1,
    /** Try to use remote configuration, but allow falling back to local configuration */
    OPPORTUNISTIC = 2
}
export declare const mode: RemoteConfigMode;
export declare const cache: RemoteConfigCacheData | null;
declare const config: NxapiRemoteConfig;
export default config;
export interface RemoteConfigCacheData {
    created_at: number;
    updated_at: number;
    etag: string | null;
    revalidated_at: number | null;
    /** Timestamp we must attempt to update the cache, but can continue to use the data if it fails */
    stale_at: number | null;
    /** Timestamp we must discard the cache require re-downloading the data */
    expires_at: number;
    version: string;
    revision: string | null;
    url: string;
    headers: Record<string, string> | Record<string, string[]>;
    data: NxapiRemoteConfig;
}
export interface NxapiRemoteConfig {
    /**
     * Versions that may connect to Nintendo and third-party auth APIs. The nxapi version number is sent to the server
     * so specific APIs can be disabled instead of using this.
     */
    require_version: string[];
    coral: CoralRemoteConfig | null;
    coral_auth: {
        default: DefaultZncaApiProvider;
        splatnet2statink: {} | null;
        flapg: {} | null;
        imink: {} | null;
    };
    moon: MoonRemoteConfig | null;
    coral_gws_nooklink: NooklinkRemoteConfig | null;
    coral_gws_splatnet3: SplatNet3RemoteConfig | null;
}
export type DefaultZncaApiProvider = 'flapg' | 'imink' | [
    'nxapi',
    string
];
export interface CoralRemoteConfig {
    znca_version: string;
}
export interface MoonRemoteConfig {
    znma_version: string;
    znma_build: string;
}
export interface NooklinkRemoteConfig {
    blanco_version: string;
}
export interface SplatNet3RemoteConfig {
    app_ver: string;
    version: string;
    revision: string;
    map_queries?: Partial<Record<string, [ /** new query ID *//** new query ID */ string, /** unsafe */ boolean] | null>>;
}
