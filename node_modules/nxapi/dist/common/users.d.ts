import * as persist from 'node-persist';
import CoralApi, { CoralApiInterface, Result } from '../api/coral.js';
import ZncProxyApi from '../api/znc-proxy.js';
import { Announcements, Friends, Friend, GetActiveEventResult, CoralSuccessResponse, WebService, WebServices } from '../api/coral-types.js';
import { SavedToken } from './auth/coral.js';
import type { Store } from '../app/main/index.js';
export interface UserData {
    created_at: number;
    expires_at: number;
}
export default class Users<T extends UserData> {
    private users;
    private promise;
    private _get;
    constructor(get: (token: string) => Promise<T>);
    get(token: string): Promise<T>;
    remove(token: string): Promise<void>;
    static coral(store: Store | persist.LocalStorage, znc_proxy_url: string, ratelimit?: boolean): Users<CoralUser<ZncProxyApi>>;
    static coral(store: Store | persist.LocalStorage, znc_proxy_url?: undefined, ratelimit?: boolean): Users<CoralUser<CoralApi>>;
    static coral(store: Store | persist.LocalStorage, znc_proxy_url?: string, ratelimit?: boolean): Users<CoralUser<CoralApiInterface>>;
}
export interface CoralUserData<T extends CoralApiInterface = CoralApi> extends UserData {
    nso: T;
    data: SavedToken;
    announcements: CoralSuccessResponse<Announcements>;
    friends: CoralSuccessResponse<Friends>;
    webservices: CoralSuccessResponse<WebServices>;
    active_event: CoralSuccessResponse<GetActiveEventResult>;
}
export declare class CoralUser<T extends CoralApiInterface = CoralApi> implements CoralUserData<T> {
    nso: T;
    data: SavedToken;
    announcements: CoralSuccessResponse<Announcements>;
    friends: CoralSuccessResponse<Friends>;
    webservices: CoralSuccessResponse<WebServices>;
    active_event: CoralSuccessResponse<GetActiveEventResult>;
    created_at: number;
    expires_at: number;
    promise: Map<string, Promise<void>>;
    delay_retry_after_error_until: number | null;
    updated: {
        announcements: number;
        friends: number;
        webservices: number;
        active_event: number;
    };
    delay_retry_after_error: number;
    update_interval: number;
    update_interval_announcements: number;
    onUpdatedWebServices: ((webservices: Result<WebServices>) => void) | null;
    constructor(nso: T, data: SavedToken, announcements: CoralSuccessResponse<Announcements>, friends: CoralSuccessResponse<Friends>, webservices: CoralSuccessResponse<WebServices>, active_event: CoralSuccessResponse<GetActiveEventResult>);
    private update;
    getAnnouncements(): Promise<Announcements>;
    getFriends(): Promise<Friend[]>;
    getWebServices(): Promise<WebServices>;
    getActiveEvent(): Promise<GetActiveEventResult>;
    addFriend(nsa_id: string): Promise<{
        result: import("../api/coral.js").ResultData<{}>;
        friend: Friend | null;
    }>;
}
export interface CachedWebServicesList {
    webservices: WebService[];
    updated_at: number;
    language: string;
    user: string;
}
