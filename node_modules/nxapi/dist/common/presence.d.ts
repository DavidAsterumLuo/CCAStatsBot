/// <reference types="node" resolution-mode="require"/>
import EventSource from '../util/eventsource.js';
import { DiscordRpcClient } from '../discord/rpc.js';
import { DiscordPresencePlayTime, DiscordPresence, ExternalMonitorConstructor, ExternalMonitor, ErrorResult } from '../discord/types.js';
import { EmbeddedSplatNet2Monitor, ZncNotifications } from './notify.js';
import { ActiveEvent, CurrentUser, Friend, Game, Presence, CoralError } from '../api/coral-types.js';
import { ErrorResponse } from '../api/util.js';
import Loop, { LoopResult } from '../util/loop.js';
declare class ZncDiscordPresenceClient {
    readonly m: ZncDiscordPresence | ZncProxyDiscordPresence;
    rpc: {
        client: DiscordRpcClient;
        id: string;
    } | null;
    connecting: string | null;
    title: {
        id: string;
        since: number;
    } | null;
    monitors: Map<ExternalMonitorConstructor<any, ExternalMonitor<any>>, ExternalMonitor<unknown>>;
    protected i: number;
    last_presence: Presence | null;
    last_user: CurrentUser | Friend | undefined;
    last_friendcode: CurrentUser['links']['friendCode'] | undefined;
    last_event: ActiveEvent | undefined;
    last_activity: DiscordPresence | string | null;
    onUpdateActivity: ((activity: DiscordPresence | null) => void) | null;
    onUpdateClient: ((client: DiscordRpcClient | null) => void) | null;
    onWillStartMonitor: (<T>(monitor: ExternalMonitorConstructor<T>) => any | T | null | Promise<T | null>) | null;
    onMonitorError: ((monitor: ExternalMonitorConstructor, instance: ExternalMonitor, error: Error) => ErrorResult | Promise<ErrorResult>) | null;
    update_presence_errors: number;
    last_update_error: Error | null;
    last_update_error_at: Date | null;
    onUpdateError: ((error: Error | null) => void) | null;
    onUpdateSuccess: (() => void) | null;
    onUpdate: (() => void) | null;
    constructor(m: ZncDiscordPresence | ZncProxyDiscordPresence);
    updatePresenceForDiscord(presence: Presence | null, user?: CurrentUser | Friend, friendcode?: CurrentUser['links']['friendCode'], activeevent?: ActiveEvent): Promise<void>;
    updateExternalMonitors(monitors: ExternalMonitorConstructor[], game?: Game, prev_title?: string, new_title?: string): Promise<void>;
    getExternalMonitorConfig(monitor: ExternalMonitorConstructor): Promise<any>;
    refreshExternalMonitorsConfig(): Promise<void>;
    updateExternalMonitorConfig<T>(monitor: ExternalMonitorConstructor<T>, config: T): Promise<void>;
    forceRestartMonitor<T>(monitor: ExternalMonitorConstructor<T>, config: T, game?: Game): Promise<void>;
    setActivity(activity: DiscordPresence | string | null): Promise<void>;
    connect(client_id: string, filter?: (client: DiscordRpcClient, id: number) => boolean): Promise<DiscordRpcClient | undefined>;
    onError(err: Error): Promise<void>;
    refreshPresence(): void;
}
export declare class ExternalMonitorPresenceInterface {
    readonly monitor: ExternalMonitorConstructor<any>;
    readonly znc_discord_presence: ZncDiscordPresence | ZncProxyDiscordPresence;
    readonly instance: ExternalMonitor;
    constructor(monitor: ExternalMonitorConstructor<any>, znc_discord_presence: ZncDiscordPresence | ZncProxyDiscordPresence);
    refreshPresence(): void;
    handleError(err: Error): Promise<ErrorResult>;
}
export declare class ZncDiscordPresence extends ZncNotifications {
    presence_user: string | null;
    discord_preconnect: boolean;
    show_friend_code: boolean;
    force_friend_code: CurrentUser['links']['friendCode'] | undefined;
    show_console_online: boolean;
    show_active_event: boolean;
    show_play_time: DiscordPresencePlayTime;
    discord_client_filter: ((client: DiscordRpcClient, id?: number) => boolean) | undefined;
    readonly discord: ZncDiscordPresenceClient;
    init(): Promise<LoopResult>;
    get presence_enabled(): boolean;
    update(): Promise<void>;
    onStop(): Promise<void>;
    saved_presence: Map<string, number>;
    savePresenceForTitleUpdateAt(id: string, presence: Presence, title_since?: number): Promise<void>;
    restorePresenceForTitleUpdateAt(id: string, presence: Presence): Promise<void>;
    handleError(err: ErrorResponse<CoralError> | NodeJS.ErrnoException): Promise<LoopResult>;
}
export declare class ZncProxyDiscordPresence extends Loop {
    presence_url: string;
    splatnet2_monitors: Map<string, EmbeddedSplatNet2Monitor | (() => Promise<EmbeddedSplatNet2Monitor>)>;
    readonly user_notifications = false;
    readonly friend_notifications = false;
    update_interval: number;
    upgrade_to_sse: boolean;
    presence_user: null;
    discord_preconnect: boolean;
    show_friend_code: boolean;
    force_friend_code: CurrentUser['links']['friendCode'] | undefined;
    show_console_online: boolean;
    readonly show_active_event = false;
    show_play_time: DiscordPresencePlayTime;
    discord_client_filter: ((client: DiscordRpcClient, id?: number) => boolean) | undefined;
    readonly discord: ZncDiscordPresenceClient;
    is_first_request: boolean;
    is_sse: boolean;
    eventstream_url: string | null;
    last_data: unknown | null;
    constructor(presence_url: string);
    get presence_enabled(): boolean;
    init(): Promise<LoopResult.OK | LoopResult.OK_SKIP_INTERVAL>;
    protected proxy_temporary_errors: number;
    update(): Promise<void | LoopResult.OK_SKIP_INTERVAL>;
    events: EventSource | null;
    useEventStream(): Promise<void>;
    onStop(): Promise<void>;
    updatePresenceForSplatNet2Monitors(friends: (CurrentUser | Friend)[]): Promise<void>;
    updatePresenceForSplatNet2Monitor(presence: Presence, nsa_id: string, name?: string): Promise<void>;
    handleError(err: ErrorResponse<CoralError> | NodeJS.ErrnoException): Promise<LoopResult>;
}
export {};
