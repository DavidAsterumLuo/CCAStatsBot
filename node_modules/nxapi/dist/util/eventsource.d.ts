/// <reference types="node" resolution-mode="require"/>
import { Response } from 'undici';
import { ErrorResponse } from '../api/util.js';
export declare class ErrorEvent extends Event {
    readonly error: Error;
    readonly message: string;
    constructor(error: Error, message?: string);
}
export declare enum EventSourceReadyState {
    CONNECTING = 0,
    OPEN = 1,
    CLOSED = 2
}
export interface EventSourceInit extends globalThis.EventSourceInit {
    authorisation?: string | (() => string);
    useragent?: string;
}
type Listener<T extends string> = T extends 'error' ? [type: T, handler: (error: ErrorEvent) => void] : T extends 'open' ? [type: T, handler: (event: Event) => void] : [
    type: T,
    handler: (event: MessageEvent<string>) => void
];
export default class EventSource {
    readonly url: string;
    protected static connections: Set<EventSource>;
    protected _connecting: Promise<Response> | null;
    protected _response: Response | null;
    protected _controller: AbortController | null;
    protected _reconnect_timeout: NodeJS.Timeout | null;
    protected _closed: boolean;
    protected _id: string | null;
    protected _retry_after: number | null;
    protected readonly _authorisation: string | (() => string) | null;
    protected readonly _useragent: string | null;
    protected readonly _min_retry_after = 2000;
    readonly withCredentials = false;
    onerror?: (error: ErrorEvent) => void;
    onmessage?: (message: MessageEvent<string>) => void;
    onopen?: (event: Event) => void;
    onAnyMessage?: (message: MessageEvent<string>) => void;
    protected readonly _listeners: Listener<string>[];
    constructor(url: string, init?: EventSourceInit);
    get readyState(): EventSourceReadyState;
    get response(): Response | null;
    addEventListener<T extends string>(event: T, handler: Listener<T>[1]): void;
    removeEventListener<T extends string>(event: T, handler?: Listener<T>[1]): void;
    protected _fetch(signal: AbortSignal): Promise<Response>;
    protected _connect(): void;
    protected _handleResponseError(response: Response, controller: AbortController, error: EventSourceErrorResponse): Promise<void>;
    protected _handleResponseStream(reader: ReadableStreamDefaultReader<Uint8Array>): Promise<void>;
    _message_event: string | null;
    _message_data: Uint8Array | null;
    _message_id: string | null;
    protected _handleLine(line: Uint8Array): void;
    protected _handleConnectionClosed(error?: Error): Promise<void>;
    close(): void;
    dispatchEvent(event: Event): void;
}
export declare class EventSourceErrorResponse extends ErrorResponse {
}
export declare class EventSourceInvalidResponseTypeError extends ErrorResponse {
}
export {};
