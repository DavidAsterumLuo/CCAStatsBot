export default abstract class Loop {
    update_interval: number;
    init(): void | Promise<LoopResult | void>;
    abstract update(): void | Promise<LoopResult | void>;
    protected loopRun(init?: boolean): Promise<LoopResult>;
    handleError(err: Error): Promise<LoopResult>;
    private is_loop_active;
    loop(init?: boolean): Promise<LoopResult.STOP | undefined>;
    private skip_interval_once;
    protected timeout_resolve: ((value: void) => void) | null;
    skipIntervalInCurrentLoop(): void;
}
export declare enum LoopResult {
    OK,
    OK_SKIP_INTERVAL,
    STOP
}
export declare abstract class EmbeddedLoop extends Loop {
    onStop?(): Promise<void> | void;
    enable(): void;
    disable(): void;
    get enabled(): boolean;
    private _running;
    private _run;
}
