/// <reference types="node-persist" />
/// <reference types="node" resolution-mode="require"/>
import { App } from './index.js';
import { DiscordPresenceConfiguration, DiscordPresenceExternalMonitorsConfiguration, DiscordPresenceSource, DiscordStatus } from '../common/types.js';
import { CurrentUser, Friend, CoralError } from '../../api/coral-types.js';
import { ErrorResponse } from '../../api/util.js';
import { ZncDiscordPresence, ZncProxyDiscordPresence } from '../../common/presence.js';
import { NotificationManager } from '../../common/notify.js';
import { LoopResult } from '../../util/loop.js';
import { DiscordPresence } from '../../discord/types.js';
import { DiscordRpcClient } from '../../discord/rpc.js';
export declare class PresenceMonitorManager {
    app: App;
    monitors: (EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor)[];
    notifications: ElectronNotificationManager;
    constructor(app: App);
    start(id: string, callback?: (monitor: EmbeddedPresenceMonitor, firstRun: boolean) => Promise<void> | void): Promise<EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor>;
    startUrl(presence_url: string): Promise<EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor>;
    stop(id: string): Promise<void>;
    getActiveDiscordPresenceMonitor(): EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor | undefined;
    getDiscordPresence(): DiscordPresence | null;
    getActiveDiscordPresenceOptions(): Omit<DiscordPresenceConfiguration, 'source'> | null;
    setDiscordPresenceOptions(options: Omit<DiscordPresenceConfiguration, 'source'>): Promise<import("node-persist").WriteFileResult | undefined>;
    getDiscordPresenceConfiguration(): DiscordPresenceConfiguration | null;
    setDiscordPresenceConfiguration(config: DiscordPresenceConfiguration | null): Promise<void>;
    setDiscordPresenceConfigurationForMonitor(monitor: EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor, config: Omit<DiscordPresenceConfiguration, 'source'>): void;
    private discord_client_filter_config;
    createDiscordClientFilter(user: string): (client: DiscordRpcClient, id?: number | undefined) => boolean;
    getDiscordClientFilterConfiguration(filter: ZncDiscordPresence['discord_client_filter']): string | undefined;
    private discord_external_monitor_config;
    createDiscordExternalMonitorHandler(presence_monitor: EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor, config: DiscordPresenceExternalMonitorsConfiguration): <T>(monitor: import("../../discord/types.js").ExternalMonitorConstructor<T, import("../../discord/types.js").ExternalMonitor<T>>) => any;
    getDiscordExternalMonitorConfiguration(handler: ZncDiscordPresence['discord']['onWillStartMonitor']): DiscordPresenceExternalMonitorsConfiguration | undefined;
    getDiscordPresenceSource(): DiscordPresenceSource | null;
    setDiscordPresenceSource(source: DiscordPresenceSource | null, callback?: (monitor: EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor) => void): Promise<void>;
    private setDiscordPresenceSourceRestoreSavedConfiguration;
    private setDiscordPresenceSourceCopyConfiguration;
    handleError(monitor: EmbeddedPresenceMonitor | EmbeddedProxyPresenceMonitor, err: ErrorResponse<CoralError> | NodeJS.ErrnoException): Promise<LoopResult>;
    getDiscordStatus(): Promise<DiscordStatus | null>;
    showDiscordPresenceLastUpdateError(): Promise<void>;
}
export declare class EmbeddedPresenceMonitor extends ZncDiscordPresence {
    notifications: ElectronNotificationManager;
    onError?: (error: ErrorResponse<CoralError> | NodeJS.ErrnoException) => Promise<LoopResult | void> | LoopResult | void;
    enable(): void;
    disable(): void;
    get enabled(): boolean;
    private _running;
    private _run;
    handleError(err: ErrorResponse<CoralError> | NodeJS.ErrnoException): Promise<LoopResult>;
    skipIntervalInCurrentLoop(start?: boolean): void;
}
export declare class EmbeddedProxyPresenceMonitor extends ZncProxyDiscordPresence {
    notifications: ElectronNotificationManager;
    onError?: (error: ErrorResponse<CoralError> | NodeJS.ErrnoException) => Promise<LoopResult | void> | LoopResult | void;
    enable(): void;
    disable(): void;
    get enabled(): boolean;
    private _running;
    private _run;
    handleError(err: ErrorResponse<CoralError> | NodeJS.ErrnoException): Promise<LoopResult>;
    skipIntervalInCurrentLoop(start?: boolean): void;
}
export declare class ElectronNotificationManager extends NotificationManager {
    onFriendOnline(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): Promise<void>;
    onFriendOffline(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): Promise<void>;
    onFriendPlayingChangeTitle(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): Promise<void>;
    onFriendTitleStateChange(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): Promise<void>;
}
