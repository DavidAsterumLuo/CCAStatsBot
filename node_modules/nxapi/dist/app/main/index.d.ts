/// <reference types="node" resolution-mode="require"/>
import { BrowserWindow, LoginItemSettingsOptions } from 'electron';
import { EventEmitter } from 'node:events';
import * as persist from 'node-persist';
import MenuApp from './menu.js';
import { PresenceMonitorManager } from './monitor.js';
import { DiscordPresenceConfiguration, LoginItem, LoginItemOptions } from '../common/types.js';
import { UpdateCacheData } from '../../common/update.js';
import Users, { CoralUser } from '../../common/users.js';
import { CoralApiInterface } from '../../api/coral.js';
export declare const protocol_registration_options: {
    path: string;
    argv: string[];
} | null;
export declare const login_item_options: LoginItemSettingsOptions;
export declare class App {
    readonly store: Store;
    readonly monitors: PresenceMonitorManager;
    readonly updater: Updater;
    menu: MenuApp | null;
    constructor(storage: persist.LocalStorage);
    main_window: BrowserWindow | null;
    showMainWindow(): BrowserWindow;
    preferences_window: BrowserWindow | null;
    showPreferencesWindow(): BrowserWindow;
}
export declare function init(): Promise<void>;
export declare function handleOpenFriendCodeUri(store: Store, uri: string): Promise<void>;
declare class Updater {
    private _cache;
    private _check;
    get cache(): UpdateCacheData | null;
    check(): Promise<UpdateCacheData | null>;
}
interface SavedMonitorState {
    users: {
        /** Nintendo Account ID */
        id: string;
        user_notifications: boolean;
        friend_notifications: boolean;
    }[];
    discord_presence: DiscordPresenceConfiguration | null;
}
export declare class Store extends EventEmitter {
    readonly app: App;
    readonly storage: persist.LocalStorage;
    readonly users: Users<CoralUser<CoralApiInterface>>;
    constructor(app: App, storage: persist.LocalStorage);
    getLoginItem(): Promise<LoginItem>;
    setLoginItem(settings: LoginItemOptions): Promise<void>;
    saveMonitorState(monitors: PresenceMonitorManager): Promise<void>;
    getSavedDiscordPresenceOptions(): Promise<Omit<DiscordPresenceConfiguration, "source"> | null>;
    restoreMonitorState(monitors: PresenceMonitorManager): Promise<void>;
    restoreUserMonitorState(monitors: PresenceMonitorManager, state: SavedMonitorState, user: SavedMonitorState['users'][0]): Promise<void>;
    restorePresenceUrlMonitorState(monitors: PresenceMonitorManager, state: SavedMonitorState): Promise<void>;
}
export {};
