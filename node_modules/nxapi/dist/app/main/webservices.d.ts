import { BrowserWindow, IpcMainInvokeEvent } from 'electron';
import { Store } from './index.js';
import { CoralApiInterface, CoralAuthData } from '../../api/coral.js';
import { WebService } from '../../api/coral-types.js';
import { SavedToken } from '../../common/auth/coral.js';
export default function openWebService(store: Store, token: string, coral: CoralApiInterface, data: SavedToken, webservice: WebService, qs?: string): Promise<void>;
export declare class WebServiceValidationError extends Error {
}
export declare function handleOpenWebServiceUri(store: Store, uri: string): Promise<void>;
export declare function handleOpenWebServiceError(err: unknown, webservice: WebService, qs?: string, auth_data?: CoralAuthData, window?: BrowserWindow, buttons?: string[]): Promise<Electron.MessageBoxReturnValue>;
export interface WebServiceData {
    webservice: WebService;
    url: string;
}
export interface QrCodeReaderOptions {
    type: 'camera' | 'photolibrary' | 'checkin';
    data: string;
}
export declare class WebServiceIpc {
    constructor(store: Store);
    private getWindowData;
    getWebService(event: IpcMainInvokeEvent): WebServiceData;
    invokeNativeShare(event: IpcMainInvokeEvent, json: string): Promise<void>;
    private downloadShareImage;
    private pathExists;
    invokeNativeShareUrl(event: IpcMainInvokeEvent, json: string): Promise<void>;
    requestGameWebToken(event: IpcMainInvokeEvent): Promise<string>;
    restorePersistentData(event: IpcMainInvokeEvent): Promise<string | undefined>;
    storePersistentData(event: IpcMainInvokeEvent, data: string): Promise<void>;
    openQrCodeReader(event: IpcMainInvokeEvent, options: QrCodeReaderOptions): Promise<string>;
    closeQrCodeReader(event: IpcMainInvokeEvent): Promise<void>;
    sendMessage(event: IpcMainInvokeEvent, json: string): Promise<void>;
    copyToClipboard(event: IpcMainInvokeEvent, data: string): Promise<void>;
    downloadImages(event: IpcMainInvokeEvent, json: string): Promise<void>;
    completeLoading(event: IpcMainInvokeEvent): Promise<void>;
}
