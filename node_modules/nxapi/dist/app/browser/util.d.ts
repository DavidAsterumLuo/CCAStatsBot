/// <reference types="node" resolution-mode="require"/>
import { EventEmitter } from 'node:events';
import React from 'react';
import { ColorSchemeName, StyleProp, ViewStyle } from 'react-native';
import type { User as DiscordUser } from 'discord-rpc';
import { DiscordPresence } from '../../discord/types.js';
import { NintendoAccountUser } from '../../api/na.js';
import { SavedToken } from '../../common/auth/coral.js';
import { SavedMoonToken } from '../../common/auth/moon.js';
export declare const WindowFocusedContext: React.Context<boolean>;
export declare function Root(props: React.PropsWithChildren<{
    title?: string;
    titleUser?: User | SavedToken;
    style?: StyleProp<ViewStyle>;
    scrollable?: boolean;
    autoresize?: boolean;
    vibrancy?: boolean;
}>): React.JSX.Element;
export declare enum RequestState {
    NOT_LOADING = 0,
    LOADING = 1,
    LOADED = 2
}
export declare function useAsync<T>(fetch: (() => Promise<T>) | null): readonly [T | null, Error | null, RequestState, React.DispatchWithoutAction];
export declare function useFetch<T>(requestInfo: RequestInfo | null, init: RequestInit | undefined, then: (res: Response) => Promise<T>): [T | null, Error | null, RequestState, React.DispatchWithoutAction];
export declare function useFetch(requestInfo: RequestInfo | null, init?: RequestInit): [Response | null, Error | null, RequestState, React.DispatchWithoutAction];
export declare function useFetchJson<T>(requestInfo: RequestInfo | null, init?: RequestInit): [T | null, Error | null, RequestState, React.DispatchWithoutAction];
export declare function useFetchText(requestInfo: RequestInfo | null, init?: RequestInit): [string | null, Error | null, RequestState, React.DispatchWithoutAction];
export declare function useEventListener<T extends EventEmitter, E extends Parameters<T['on']>[0], L extends Parameters<T['on']>[1]>(events: T, event: E, listener: L, deps: any[]): void;
export declare const AccentColourContext: React.Context<string>;
export declare function useAccentColour(): string;
export declare const ColourSchemeContext: React.Context<ColorSchemeName>;
export declare function useColourScheme(): ColorSchemeName;
export interface User {
    user: NintendoAccountUser;
    nso: SavedToken | null;
    nsotoken: string | undefined;
    moon: SavedMoonToken | null;
    moontoken: string | undefined;
}
export declare function getAccounts(): Promise<User[]>;
export declare function useDiscordPresenceSource(): readonly [import("../common/types.js").DiscordPresenceSource | null, RequestState];
export declare function useActiveDiscordPresence(): DiscordPresence | null;
export declare function useActiveDiscordUser(): DiscordUser | null;
export declare function useTimeSince(time: Date, short?: boolean): string;
