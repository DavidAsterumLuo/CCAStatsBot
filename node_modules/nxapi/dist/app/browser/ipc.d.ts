/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { EventEmitter } from 'node:events';
import type { NxapiElectronIpc } from '../preload/index.js';
declare global {
    interface Window {
        nxapiElectronIpc: NxapiElectronIpc;
    }
}
export declare const events: EventEmitter;
declare const ipc: {
    events: EventEmitter;
    getWindowData: () => import("../common/types.js").WindowConfiguration<import("../common/types.js").WindowType>;
    getLoginItemSettings: () => Promise<import("../common/types.js").LoginItem>;
    setLoginItemSettings: (settings: import("../common/types.js").LoginItemOptions) => Promise<void>;
    getUpdateData: () => Promise<import("../../common/update.js").UpdateCacheData | null>;
    checkUpdates: () => Promise<import("../../common/update.js").UpdateCacheData | null>;
    listNintendoAccounts: () => Promise<string[] | undefined>;
    addCoralAccount: () => Promise<string>;
    addMoonAccount: () => Promise<string>;
    getNintendoAccountCoralToken: (id: string) => Promise<string | undefined>;
    getSavedCoralToken: (token: string) => Promise<import("../../common/auth/coral.js").SavedToken | undefined>;
    getCoralAnnouncements: (token: string) => Promise<import("../../api/coral-types.js").Announcements>;
    getNsoFriends: (token: string) => Promise<import("../../api/coral-types.js").Friend[]>;
    getWebServices: (token: string) => Promise<import("../../api/coral-types.js").WebServices | undefined>;
    openWebService: (webservice: import("../../api/coral-types.js").WebService, token: string, qs?: string | undefined) => Promise<number>;
    getCoralActiveEvent: (token: string) => Promise<import("../../api/coral-types.js").GetActiveEventResult>;
    getNsoFriendCodeUrl: (token: string) => Promise<import("../../api/coral-types.js").FriendCodeUrl>;
    getNsoUserByFriendCode: (token: string, friendcode: string, hash?: string | undefined) => Promise<import("../../api/coral-types.js").FriendCodeUser>;
    addNsoFriend: (token: string, nsa_id: string) => Promise<{
        result: import("../../api/coral-types.js").CoralSuccessResponse<{}>;
        friend: import("../../api/coral-types.js").Friend | null;
    }>;
    getDiscordPresenceConfig: () => Promise<import("../common/types.js").DiscordPresenceConfiguration | null>;
    setDiscordPresenceConfig: (config: import("../common/types.js").DiscordPresenceConfiguration | null) => Promise<void>;
    getDiscordPresenceOptions: () => Promise<Omit<import("../common/types.js").DiscordPresenceConfiguration, "source"> | null>;
    getSavedDiscordPresenceOptions: () => Promise<Omit<import("../common/types.js").DiscordPresenceConfiguration, "source"> | null>;
    setDiscordPresenceOptions: (options: Omit<import("../common/types.js").DiscordPresenceConfiguration, "source">) => Promise<void>;
    getDiscordPresenceSource: () => Promise<import("../common/types.js").DiscordPresenceSource | null>;
    setDiscordPresenceSource: (source: import("../common/types.js").DiscordPresenceSource | null) => Promise<void>;
    getDiscordPresence: () => Promise<import("../../discord/types.js").DiscordPresence | null>;
    getDiscordStatus: () => Promise<import("../common/types.js").DiscordStatus | null>;
    showDiscordLastUpdateError: () => Promise<void>;
    getDiscordUser: () => Promise<import("discord-rpc").User | null>;
    getDiscordUsers: () => Promise<import("discord-rpc").User[]>;
    getNintendoAccountMoonToken: (id: string) => Promise<string | undefined>;
    getSavedMoonToken: (token: string) => Promise<import("../../common/auth/moon.js").SavedMoonToken | undefined>;
    showPreferencesWindow: () => Promise<number>;
    showFriendModal: (props: import("./friend/index.js").FriendProps) => Promise<number>;
    showDiscordModal: (props?: import("./discord/index.js").DiscordSetupProps) => Promise<number>;
    showAddFriendModal: (props: import("./add-friend/index.js").AddFriendProps) => Promise<number>;
    setWindowHeight: (height: number) => Promise<void>;
    openExternalUrl: (url: string) => Promise<void>;
    share: (item: Electron.SharingItem) => Promise<void>;
    showUserMenu: (user: import("../../api/na.js").NintendoAccountUser, nso?: import("../../api/coral-types.js").CurrentUser | undefined, moon?: boolean | undefined) => Promise<void>;
    showAddUserMenu: () => Promise<void>;
    showFriendCodeMenu: (fc: {
        regenerable: boolean;
        regenerableAt: number;
        id: string;
    }) => Promise<void>;
    showFriendMenu: (user: import("../../api/na.js").NintendoAccountUser, nso: import("../../api/coral-types.js").CurrentUser, friend: import("../../api/coral-types.js").Friend) => Promise<void>;
    registerEventListener: (event: string, listener: (args: any[]) => void) => EventEmitter;
    removeEventListener: (event: string, listener: (args: any[]) => void) => EventEmitter;
    getAccentColour: () => string | undefined;
    platform: NodeJS.Platform;
};
export default ipc;
export declare const config: import("../common/types.js").WindowConfiguration<import("../common/types.js").WindowType>;
