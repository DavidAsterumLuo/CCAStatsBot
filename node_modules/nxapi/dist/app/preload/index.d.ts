/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { SharingItem } from 'electron';
import { EventEmitter } from 'node:events';
import type { User } from 'discord-rpc';
import type { DiscordPresenceConfiguration, DiscordPresenceSource, DiscordStatus, LoginItem, LoginItemOptions, WindowConfiguration } from '../common/types.js';
import type { SavedToken } from '../../common/auth/coral.js';
import type { SavedMoonToken } from '../../common/auth/moon.js';
import type { UpdateCacheData } from '../../common/update.js';
import type { Announcements, CoralSuccessResponse, CurrentUser, Friend, FriendCodeUrl, FriendCodeUser, GetActiveEventResult, WebService, WebServices } from '../../api/coral-types.js';
import type { DiscordPresence } from '../../discord/types.js';
import type { NintendoAccountUser } from '../../api/na.js';
import type { DiscordSetupProps } from '../browser/discord/index.js';
import type { FriendProps } from '../browser/friend/index.js';
import type { AddFriendProps } from '../browser/add-friend/index.js';
declare const ipc: {
    getWindowData: () => WindowConfiguration<import("../common/types.js").WindowType>;
    getLoginItemSettings: () => Promise<LoginItem>;
    setLoginItemSettings: (settings: LoginItemOptions) => Promise<void>;
    getUpdateData: () => Promise<UpdateCacheData | null>;
    checkUpdates: () => Promise<UpdateCacheData | null>;
    listNintendoAccounts: () => Promise<string[] | undefined>;
    addCoralAccount: () => Promise<string>;
    addMoonAccount: () => Promise<string>;
    getNintendoAccountCoralToken: (id: string) => Promise<string | undefined>;
    getSavedCoralToken: (token: string) => Promise<SavedToken | undefined>;
    getCoralAnnouncements: (token: string) => Promise<Announcements>;
    getNsoFriends: (token: string) => Promise<Friend[]>;
    getWebServices: (token: string) => Promise<WebServices | undefined>;
    openWebService: (webservice: WebService, token: string, qs?: string) => Promise<number>;
    getCoralActiveEvent: (token: string) => Promise<GetActiveEventResult>;
    getNsoFriendCodeUrl: (token: string) => Promise<FriendCodeUrl>;
    getNsoUserByFriendCode: (token: string, friendcode: string, hash?: string) => Promise<FriendCodeUser>;
    addNsoFriend: (token: string, nsa_id: string) => Promise<{
        result: CoralSuccessResponse<{}>;
        friend: Friend | null;
    }>;
    getDiscordPresenceConfig: () => Promise<DiscordPresenceConfiguration | null>;
    setDiscordPresenceConfig: (config: DiscordPresenceConfiguration | null) => Promise<void>;
    getDiscordPresenceOptions: () => Promise<Omit<DiscordPresenceConfiguration, "source"> | null>;
    getSavedDiscordPresenceOptions: () => Promise<Omit<DiscordPresenceConfiguration, "source"> | null>;
    setDiscordPresenceOptions: (options: Omit<DiscordPresenceConfiguration, 'source'>) => Promise<void>;
    getDiscordPresenceSource: () => Promise<DiscordPresenceSource | null>;
    setDiscordPresenceSource: (source: DiscordPresenceSource | null) => Promise<void>;
    getDiscordPresence: () => Promise<DiscordPresence | null>;
    getDiscordStatus: () => Promise<DiscordStatus | null>;
    showDiscordLastUpdateError: () => Promise<void>;
    getDiscordUser: () => Promise<User | null>;
    getDiscordUsers: () => Promise<User[]>;
    getNintendoAccountMoonToken: (id: string) => Promise<string | undefined>;
    getSavedMoonToken: (token: string) => Promise<SavedMoonToken | undefined>;
    showPreferencesWindow: () => Promise<number>;
    showFriendModal: (props: FriendProps) => Promise<number>;
    showDiscordModal: (props?: DiscordSetupProps) => Promise<number>;
    showAddFriendModal: (props: AddFriendProps) => Promise<number>;
    setWindowHeight: (height: number) => Promise<void>;
    openExternalUrl: (url: string) => Promise<void>;
    share: (item: SharingItem) => Promise<void>;
    showUserMenu: (user: NintendoAccountUser, nso?: CurrentUser, moon?: boolean) => Promise<void>;
    showAddUserMenu: () => Promise<void>;
    showFriendCodeMenu: (fc: CurrentUser['links']['friendCode']) => Promise<void>;
    showFriendMenu: (user: NintendoAccountUser, nso: CurrentUser, friend: Friend) => Promise<void>;
    registerEventListener: (event: string, listener: (args: any[]) => void) => EventEmitter;
    removeEventListener: (event: string, listener: (args: any[]) => void) => EventEmitter;
    getAccentColour: () => string | undefined;
    platform: NodeJS.Platform;
};
export type NxapiElectronIpc = typeof ipc;
export {};
