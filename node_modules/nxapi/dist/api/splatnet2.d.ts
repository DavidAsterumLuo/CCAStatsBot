import { Cookie, FormData } from 'undici';
import { WebServiceToken } from './coral-types.js';
import { NintendoAccountUser } from './na.js';
import { ErrorResponse } from './util.js';
import { CoralApiInterface } from './coral.js';
import { ActiveFestivals, CoopResult, CoopResults, CoopSchedules, HeroRecords, LeagueMatchRankings, NicknameAndIcons, PastFestivals, Records, Result, Results, Schedules, ShareResponse, ShopMerchandises, Stages, Timeline, WebServiceError, XPowerRankingRecords, XPowerRankingSummary } from './splatnet2-types.js';
import { Rule as XPowerRankingRule, Season } from './splatnet2-xrank.js';
export declare const SPLATNET2_WEBSERVICE_ID = 5741031244955648;
export declare const SPLATNET2_WEBSERVICE_URL = "https://app.splatoon2.nintendo.net/";
export declare const SPLATNET2_WEBSERVICE_USERAGENT = "Mozilla/5.0 (Linux; Android 8.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36";
export declare const updateIksmSessionLastUsed: {
    handler?: ((iksm_session: string) => void);
};
export default class SplatNet2Api {
    iksm_session: string;
    unique_id: string;
    useragent: string;
    protected _session_expired: boolean;
    protected constructor(iksm_session: string, unique_id: string, useragent: string);
    fetch<T extends object>(url: string, method?: string, body?: string | FormData, headers?: object): Promise<import("./util.js").HasResponse<T, import("undici").Response>>;
    getRecords(): Promise<import("./util.js").HasResponse<Records, import("undici").Response>>;
    getStages(): Promise<import("./util.js").HasResponse<Stages, import("undici").Response>>;
    getActiveFestivals(): Promise<import("./util.js").HasResponse<ActiveFestivals, import("undici").Response>>;
    getTimeline(): Promise<import("./util.js").HasResponse<Timeline, import("undici").Response>>;
    getUserNicknameAndIcon(ids: string[]): Promise<import("./util.js").HasResponse<NicknameAndIcons, import("undici").Response>>;
    getSchedules(): Promise<import("./util.js").HasResponse<Schedules, import("undici").Response>>;
    getHeroRecords(): Promise<import("./util.js").HasResponse<HeroRecords, import("undici").Response>>;
    getXPowerRankingSummary(season: string | Date | Season): Promise<import("./util.js").HasResponse<XPowerRankingSummary, import("undici").Response>>;
    getXPowerRankingLeaderboard(season: string | Date | Season, rule: XPowerRankingRule, page?: number): Promise<import("./util.js").HasResponse<XPowerRankingRecords, import("undici").Response>>;
    getPastFestivals(): Promise<import("./util.js").HasResponse<PastFestivals, import("undici").Response>>;
    getLeagueMatchRanking(id: string, region: LeagueRegion): Promise<LeagueMatchRankings>;
    getLeagueMatchRanking(date: Date, type: LeagueType, region: LeagueRegion): Promise<LeagueMatchRankings>;
    getResults(): Promise<import("./util.js").HasResponse<Results, import("undici").Response>>;
    getResult(id: string | number): Promise<import("./util.js").HasResponse<Result, import("undici").Response>>;
    getCoopResults(): Promise<import("./util.js").HasResponse<CoopResults, import("undici").Response>>;
    getCoopResult(id: number): Promise<import("./util.js").HasResponse<CoopResult, import("undici").Response>>;
    getCoopSchedules(): Promise<import("./util.js").HasResponse<CoopSchedules, import("undici").Response>>;
    getShopMerchandises(): Promise<import("./util.js").HasResponse<ShopMerchandises, import("undici").Response>>;
    shareProfile(stage: string, colour: ShareColour): Promise<import("./util.js").HasResponse<ShareResponse, import("undici").Response>>;
    shareChallenge(id: string, season?: 1 | 2): Promise<import("./util.js").HasResponse<ShareResponse, import("undici").Response>>;
    shareResultsSummary(): Promise<import("./util.js").HasResponse<ShareResponse, import("undici").Response>>;
    shareResult(id: string | number): Promise<import("./util.js").HasResponse<ShareResponse, import("undici").Response>>;
    static createWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<{
        splatnet: SplatNet2Api;
        data: SplatNet2AuthData;
    }>;
    static createWithSavedToken(data: SplatNet2AuthData): SplatNet2Api;
    static createWithCliTokenData(data: SplatNet2CliTokenData): SplatNet2Api;
    static createWithIksmSession(iksm_session: string, unique_id: string): SplatNet2Api;
    static loginWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<SplatNet2AuthData>;
    static loginWithWebServiceToken(webserviceToken: WebServiceToken, user: NintendoAccountUser): Promise<SplatNet2AuthData>;
}
export declare class SplatNet2ErrorResponse extends ErrorResponse<WebServiceError> {
}
export interface SplatNet2AuthData {
    webserviceToken: WebServiceToken;
    url: string;
    cookies: string | Cookie[];
    body: string;
    language: string;
    region: string;
    /** Splatoon 2 player ID aka. unique_id */
    user_id: string;
    nsa_id: string;
    iksm_session: string;
    expires_at: number;
    useragent: string;
}
export interface SplatNet2CliTokenData {
    iksm_session: string;
    language: string;
    region: string;
    user_id: string;
    nsa_id: string;
}
export declare function toLeagueId(date: Date, type: LeagueType): string;
export declare enum LeagueType {
    TEAM = "T",
    PAIR = "P"
}
export declare enum LeagueRegion {
    ALL_REGIONS = "ALL",
    JAPAN = "JP",
    NA_AU_NZ = "US",
    EUROPE = "EU"
}
export declare enum ShareColour {
    PINK = "pink",
    GREEN = "green",
    YELLOW = "yellow",
    PURPLE = "purple",
    BLUE = "blue",
    SUN_YELLOW = "sun-yellow"
}
