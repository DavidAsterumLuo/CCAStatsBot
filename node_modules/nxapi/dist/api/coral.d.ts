import { Response } from 'undici';
import { JwtPayload } from '../util/jwt.js';
import type { CoralRemoteConfig } from '../common/remote-config.js';
import { AccountLogin, Announcements, CoralError, CoralStatus, CoralSuccessResponse, CurrentUser, CurrentUserPermissions, Event, FriendCodeUrl, FriendCodeUser, Friends, GetActiveEventResult, PresencePermissions, User, WebServices, WebServiceToken } from './coral-types.js';
import { FResult } from './f.js';
import { NintendoAccountSessionAuthorisation, NintendoAccountToken, NintendoAccountUser } from './na.js';
import { ErrorResponse, ResponseSymbol } from './util.js';
import { ErrorDescription, ErrorDescriptionSymbol, HasErrorDescription } from '../util/errors.js';
export declare const ZNCA_CLIENT_ID = "71b963c1b7b6d119";
export declare const ResponseDataSymbol: unique symbol;
export declare const CorrelationIdSymbol: unique symbol;
export type Result<T> = T & ResultData<T>;
export interface ResultData<T> {
    [ResponseSymbol]: Response;
    [ResponseDataSymbol]: CoralSuccessResponse<T>;
    [CorrelationIdSymbol]: string;
    /** @deprecated */
    status: CoralStatus.OK;
    /** @deprecated */
    result: T;
    /** @deprecated */
    correlationId: string;
}
export interface CoralApiInterface {
    getAnnouncements(): Promise<Result<Announcements>>;
    getFriendList(): Promise<Result<Friends>>;
    addFavouriteFriend(nsa_id: string): Promise<Result<{}>>;
    removeFavouriteFriend(nsa_id: string): Promise<Result<{}>>;
    getWebServices(): Promise<Result<WebServices>>;
    getActiveEvent(): Promise<Result<GetActiveEventResult>>;
    getEvent(id: number): Promise<Result<Event>>;
    getUser(id: number): Promise<Result<User>>;
    getUserByFriendCode(friend_code: string, hash?: string): Promise<Result<FriendCodeUser>>;
    getCurrentUser(): Promise<Result<CurrentUser>>;
    getFriendCodeUrl(): Promise<Result<FriendCodeUrl>>;
    getCurrentUserPermissions(): Promise<Result<CurrentUserPermissions>>;
    getWebServiceToken(id: number): Promise<Result<WebServiceToken>>;
}
export interface ClientInfo {
    platform: string;
    version: string;
    useragent: string;
}
declare const RemoteConfigSymbol: unique symbol;
declare const ClientInfoSymbol: unique symbol;
declare const CoralUserIdSymbol: unique symbol;
declare const NintendoAccountIdSymbol: unique symbol;
export default class CoralApi implements CoralApiInterface {
    token: string;
    useragent: string | null;
    [RemoteConfigSymbol]: CoralRemoteConfig | null;
    [ClientInfoSymbol]: ClientInfo;
    [CoralUserIdSymbol]: string;
    [NintendoAccountIdSymbol]: string;
    onTokenExpired: ((data?: CoralError, res?: Response) => Promise<CoralAuthData | void>) | null;
    protected constructor(token: string, useragent: string | null, coral_user_id: string, na_id: string, znca_version?: string, znca_useragent?: string, config?: CoralRemoteConfig);
    fetch<T = unknown>(url: string, method?: string, body?: string, headers?: object, 
    /** @internal */ _autoRenewToken?: boolean, 
    /** @internal */ _attempt?: number): Promise<Result<T>>;
    call<T = unknown>(url: string, parameter?: {}, 
    /** @internal */ _autoRenewToken?: boolean): Promise<Result<T>>;
    getAnnouncements(): Promise<Result<Announcements>>;
    getFriendList(): Promise<Result<Friends>>;
    addFavouriteFriend(nsa_id: string): Promise<ResultData<{}>>;
    removeFavouriteFriend(nsa_id: string): Promise<ResultData<{}>>;
    getWebServices(): Promise<Result<WebServices>>;
    getActiveEvent(): Promise<Result<GetActiveEventResult>>;
    getEvent(id: number): Promise<Result<Event>>;
    getUser(id: number): Promise<Result<User>>;
    getUserByFriendCode(friend_code: string, hash?: string): Promise<Result<FriendCodeUser>>;
    sendFriendRequest(nsa_id: string): Promise<ResultData<{}>>;
    getCurrentUser(): Promise<Result<CurrentUser>>;
    getFriendCodeUrl(): Promise<Result<FriendCodeUrl>>;
    getCurrentUserPermissions(): Promise<Result<CurrentUserPermissions>>;
    updateCurrentUserPermissions(to: PresencePermissions, from: PresencePermissions, etag: string): Promise<ResultData<{}>>;
    getWebServiceToken(id: number, /** @internal */ _attempt?: number): Promise<Result<WebServiceToken>>;
    getToken(token: string, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    getTokenWithNintendoAccountToken(nintendoAccountToken: NintendoAccountToken, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    renewToken(token: string, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    renewTokenWithNintendoAccountToken(token: NintendoAccountToken, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    protected setTokenWithSavedToken(data: CoralAuthData | PartialCoralAuthData): void;
    static createWithSessionToken(token: string, useragent?: string): Promise<{
        nso: CoralApi;
        data: CoralAuthData;
    }>;
    static createWithNintendoAccountToken(token: NintendoAccountToken, user: NintendoAccountUser, useragent?: string): Promise<{
        nso: CoralApi;
        data: {
            nintendoAccountToken: NintendoAccountToken;
            user: NintendoAccountUser;
            f: FResult;
            nsoAccount: AccountLogin;
            credential: {
                accessToken: string;
                expiresIn: number;
            };
            znca_version: string;
            znca_useragent: string;
        };
    }>;
    static createWithSavedToken(data: CoralAuthData, useragent?: string): CoralApi;
    static loginWithSessionToken(token: string, useragent?: string): Promise<CoralAuthData>;
    static loginWithNintendoAccountToken(nintendoAccountToken: NintendoAccountToken, user: NintendoAccountUser, useragent?: string): Promise<{
        nintendoAccountToken: NintendoAccountToken;
        user: NintendoAccountUser;
        f: FResult;
        nsoAccount: AccountLogin;
        credential: {
            accessToken: string;
            expiresIn: number;
        };
        znca_version: string;
        znca_useragent: string;
    }>;
}
export declare class CoralErrorResponse extends ErrorResponse<CoralError> implements HasErrorDescription {
    get status(): CoralStatus | null;
    get [ErrorDescriptionSymbol](): ErrorDescription | null;
}
export declare class NintendoAccountSessionAuthorisationCoral extends NintendoAccountSessionAuthorisation {
    protected constructor(authorise_url: string, state: string, verifier: string, redirect_uri?: string);
    static create(/** @internal */ redirect_uri?: string): NintendoAccountSessionAuthorisationCoral;
}
export interface CoralAuthData {
    nintendoAccountToken: NintendoAccountToken;
    user: NintendoAccountUser;
    f: FResult;
    nsoAccount: AccountLogin;
    credential: AccountLogin['webApiServerCredential'];
    znca_version: string;
    znca_useragent: string;
}
export type PartialCoralAuthData = Pick<CoralAuthData, 'nintendoAccountToken' | 'f' | 'nsoAccount' | 'credential'>;
export interface CoralJwtPayload extends JwtPayload {
    isChildRestricted: boolean;
    membership: {
        active: boolean;
    };
    aud: string;
    exp: number;
    iat: number;
    iss: 'api-lp1.znc.srv.nintendo.net';
    /** Coral user ID (CurrentUser.id, not CurrentUser.nsaId) */
    sub: number;
    typ: 'id_token';
}
export interface CoralWebServiceJwtPayload extends JwtPayload {
    isChildRestricted: boolean;
    aud: string;
    exp: number;
    iat: number;
    iss: 'api-lp1.znc.srv.nintendo.net';
    jti: string;
    /** Coral user ID (CurrentUser.id, not CurrentUser.nsaId) */
    sub: number;
    links: {
        networkServiceAccount: {
            /** NSA ID (CurrentUser.nsaId) */
            id: string;
        };
    };
    typ: 'id_token';
    membership: {
        active: boolean;
    };
}
export {};
