export declare abstract class ZncaApi {
    useragent?: string | undefined;
    constructor(useragent?: string | undefined);
    abstract genf(token: string, hash_method: HashMethod, user?: {
        na_id: string;
        coral_user_id?: string;
    }): Promise<FResult>;
}
export declare enum HashMethod {
    CORAL = 1,
    WEB_SERVICE = 2
}
export declare function flapg(hash_method: HashMethod, token: string, timestamp?: string | number, request_id?: string, useragent?: string): Promise<import("./util.js").HasResponse<IminkFResponse, import("undici").Response>>;
/** @deprecated */
export declare enum FlapgIid {
    /** Nintendo Switch Online app token */
    NSO = "nso",
    /** Web service token */
    APP = "app"
}
export interface FlapgApiRequest {
    hash_method: '1' | '2';
    token: string;
    timestamp?: string;
    request_id?: string;
}
export type FlapgApiResponse = IminkFResponse;
export type FlapgApiError = IminkFError;
export declare class ZncaApiFlapg extends ZncaApi {
    genf(token: string, hash_method: HashMethod): Promise<{
        provider: "flapg";
        hash_method: HashMethod;
        token: string;
        request_id: `${string}-${string}-${string}-${string}-${string}`;
        timestamp: number;
        f: string;
        result: import("./util.js").HasResponse<IminkFResponse, import("undici").Response>;
    }>;
}
export declare function iminkf(hash_method: HashMethod, token: string, timestamp?: number, request_id?: string, user?: {
    na_id: string;
    coral_user_id?: string;
}, useragent?: string): Promise<import("./util.js").HasResponse<IminkFResponse, import("undici").Response>>;
export interface IminkFRequest {
    hash_method: 1 | 2 | '1' | '2';
    token: string;
    timestamp?: string | number;
    request_id?: string;
}
export interface IminkFResponse {
    f: string;
    timestamp: number;
    request_id: string;
}
export interface IminkFError {
    reason: string;
    error: true;
}
export declare class ZncaApiImink extends ZncaApi {
    genf(token: string, hash_method: HashMethod, user?: {
        na_id: string;
        coral_user_id?: string;
    }): Promise<{
        provider: "imink";
        hash_method: HashMethod;
        token: string;
        request_id: `${string}-${string}-${string}-${string}-${string}`;
        timestamp: number;
        f: string;
        user: {
            na_id: string;
            coral_user_id?: string | undefined;
        } | undefined;
        result: import("./util.js").HasResponse<IminkFResponse, import("undici").Response>;
    }>;
}
export declare function genf(url: string, hash_method: HashMethod, token: string, timestamp?: number, request_id?: string, user?: {
    na_id: string;
    coral_user_id?: string;
}, app?: {
    platform?: string;
    version?: string;
}, useragent?: string): Promise<import("./util.js").HasResponse<AndroidZncaFResponse, import("undici").Response>>;
export interface AndroidZncaFRequest {
    hash_method: '1' | '2';
    token: string;
    timestamp?: string | number;
    request_id?: string;
}
export interface AndroidZncaFResponse {
    f: string;
    timestamp?: number;
    request_id?: string;
    warnings?: {
        error: string;
        error_message: string;
    }[];
}
export interface AndroidZncaFError {
    error: string;
    error_message?: string;
    errors?: {
        error: string;
        error_message: string;
    }[];
    warnings?: {
        error: string;
        error_message: string;
    }[];
}
export declare class ZncaApiNxapi extends ZncaApi {
    readonly url: string;
    readonly app?: {
        platform?: string | undefined;
        version?: string | undefined;
    } | undefined;
    constructor(url: string, app?: {
        platform?: string | undefined;
        version?: string | undefined;
    } | undefined, useragent?: string);
    genf(token: string, hash_method: HashMethod, user?: {
        na_id: string;
        coral_user_id?: string;
    }): Promise<{
        provider: "nxapi";
        url: string;
        hash_method: HashMethod;
        token: string;
        request_id: `${string}-${string}-${string}-${string}-${string}`;
        timestamp: number;
        f: string;
        user: {
            na_id: string;
            coral_user_id?: string | undefined;
        } | undefined;
        result: import("./util.js").HasResponse<AndroidZncaFResponse, import("undici").Response>;
    }>;
}
export declare function f(token: string, hash_method: HashMethod | `${HashMethod}`, options?: ZncaApiOptions): Promise<FResult>;
export declare function f(token: string, hash_method: HashMethod | `${HashMethod}`, useragent?: string): Promise<FResult>;
export type FResult = {
    provider: string;
    hash_method: HashMethod;
    token: string;
    timestamp: number;
    request_id: string;
    f: string;
    user?: {
        na_id: string;
        coral_user_id?: string;
    };
    result: unknown;
} & ({
    provider: 'flapg';
    result: FlapgApiResponse;
} | {
    provider: 'imink';
    result: IminkFResponse;
} | {
    provider: 'nxapi';
    url: string;
    result: AndroidZncaFResponse;
});
interface ZncaApiOptions {
    useragent?: string;
    platform?: string;
    version?: string;
    user?: {
        na_id: string;
        coral_user_id?: string;
    };
}
export declare function getPreferredZncaApiFromEnvironment(options?: ZncaApiOptions): ZncaApi | null;
export declare function getPreferredZncaApiFromEnvironment(useragent?: string): ZncaApi | null;
export declare function getDefaultZncaApi(options?: ZncaApiOptions): Promise<ZncaApi>;
export declare function getDefaultZncaApi(useragent?: string): Promise<ZncaApi>;
export {};
