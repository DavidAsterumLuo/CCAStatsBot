import { Response as UndiciResponse } from 'undici';
export declare const ResponseSymbol: unique symbol;
export interface ResponseData<R> {
    [ResponseSymbol]: R;
}
export type HasResponse<T, R> = T & ResponseData<R>;
export declare function defineResponse<T, R>(data: T, response: R): HasResponse<T, R>;
export declare class ErrorResponse<T = unknown> extends Error {
    readonly response: Response | UndiciResponse;
    readonly body: string | undefined;
    readonly data: T | undefined;
    constructor(message: string, response: Response | UndiciResponse, body?: string | ArrayBuffer | T);
    static fromResponse(response: UndiciResponse, message: string): Promise<ErrorResponse<ArrayBuffer>>;
}
