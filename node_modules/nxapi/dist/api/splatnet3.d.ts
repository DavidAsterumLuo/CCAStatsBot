import { Response } from 'undici';
import { BankaraBattleHistoriesRefetchResult, GraphQLError, GraphQLErrorResponse, GraphQLSuccessResponse, KnownRequestId, LatestBattleHistoriesRefetchResult, MyOutfitInput, PrivateBattleHistoriesRefetchResult, RegularBattleHistoriesRefetchResult, RequestId, ResultTypes, VariablesTypes, XBattleHistoriesRefetchResult } from 'splatnet3-types/splatnet3';
import { WebServiceToken } from './coral-types.js';
import { CoralApiInterface } from './coral.js';
import { NintendoAccountUser } from './na.js';
import { BulletToken } from './splatnet3-types.js';
import { ErrorResponse, HasResponse, ResponseSymbol } from './util.js';
export declare const SPLATNET3_WEBSERVICE_ID = 4834290508791808;
export declare const SPLATNET3_WEBSERVICE_URL = "https://api.lp1.av5ja.srv.nintendo.net";
export declare const SPLATNET3_WEBSERVICE_USERAGENT = "Mozilla/5.0 (Linux; Android 8.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36";
export declare enum SplatNet3AuthErrorCode {
    USER_NOT_REGISTERED = "USER_NOT_REGISTERED",
    ERROR_INVALID_PARAMETERS = "ERROR_INVALID_PARAMETERS",
    ERROR_INVALID_GAME_WEB_TOKEN = "ERROR_INVALID_GAME_WEB_TOKEN",
    ERROR_OBSOLETE_VERSION = "ERROR_OBSOLETE_VERSION",
    ERROR_RATE_LIMIT = "ERROR_RATE_LIMIT",
    ERROR_SERVER = "ERROR_SERVER",
    ERROR_SERVER_MAINTENANCE = "ERROR_SERVER_MAINTENANCE"
}
export declare const RequestIdSymbol: unique symbol;
export declare const VariablesSymbol: unique symbol;
export type PersistedQueryResult<T> = GraphQLSuccessResponse<T> & PersistedQueryResultData;
export interface PersistedQueryResultData {
    [ResponseSymbol]: Response;
    [RequestIdSymbol]: KnownRequestId;
    [VariablesSymbol]: {};
}
export type NotNullPersistedQueryResult<T extends PersistedQueryResult<unknown> | unknown, K extends T extends PersistedQueryResult<infer Result> ? keyof Result : keyof T> = T extends PersistedQueryResult<infer Result> ? PersistedQueryResult<{
    [FieldName in keyof Result]: FieldName extends K ? Exclude<Result[FieldName], null> : Result[FieldName];
}> : PersistedQueryResult<{
    [FieldName in keyof T]: FieldName extends K ? Exclude<T[FieldName], null> : T[FieldName];
}>;
declare enum MapQueriesMode {
    /** NXAPI_SPLATNET3_UPGRADE_QUERIES=0 - never upgrade persisted query IDs (not recommended) */
    NEVER = 0,
    /** NXAPI_SPLATNET3_UPGRADE_QUERIES=1 - upgrade persisted query IDs that do not contain potentially breaking changes (not recommended) */
    ONLY_SAFE_NO_REJECT = 1,
    /** NXAPI_SPLATNET3_UPGRADE_QUERIES=2 - upgrade persisted query IDs, but reject requests that contain potentially breaking changes */
    ONLY_SAFE = 2,
    /** NXAPI_SPLATNET3_UPGRADE_QUERIES=3 - upgrade persisted query IDs, including requests that contain potentially breaking changes (default) */
    ALL = 3
}
export default class SplatNet3Api {
    bullet_token: string;
    version: string;
    map_queries: Partial<Record<string, [ /** new query ID *//** new query ID */ string, /** unsafe */ boolean] | null>>;
    readonly map_queries_mode: MapQueriesMode;
    readonly na_country: string;
    language: string;
    useragent: string;
    onTokenShouldRenew: ((remaining: number, res: Response) => Promise<SplatNet3AuthData | void>) | null;
    onTokenExpired: ((res?: Response) => Promise<SplatNet3AuthData | void>) | null;
    protected _token_expired: boolean;
    graphql_strict: boolean;
    protected constructor(bullet_token: string, version: string, map_queries: Partial<Record<string, [ /** new query ID *//** new query ID */ string, /** unsafe */ boolean] | null>>, map_queries_mode: MapQueriesMode, na_country: string, language: string, useragent: string);
    fetch<T = unknown>(url: string, method?: string, body?: string, headers?: object, 
    /** @internal */ _log?: string, 
    /** @internal */ _attempt?: number): Promise<HasResponse<T, Response>>;
    persistedQuery<T = unknown, V = unknown, 
    /** @private */
    _Id extends string = string, 
    /** @private */
    _Result extends (T extends object ? T : _Id extends KnownRequestId ? ResultTypes[_Id] : unknown) = (T extends object ? T : _Id extends KnownRequestId ? ResultTypes[_Id] : unknown), 
    /** @private */
    _Variables extends (V extends object ? V : _Id extends KnownRequestId ? VariablesTypes[_Id] : unknown) = (V extends object ? V : _Id extends KnownRequestId ? VariablesTypes[_Id] : unknown)>(id: _Id, variables: _Variables): Promise<PersistedQueryResult<_Result>>;
    getPersistedQueryId(id: RequestId): string;
    private getUpgradedPersistedQueryId;
    /** * */
    getCurrentFest(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/c0429fd738d829445e994d3370999764").default>>;
    /** * */
    getConfigureAnalytics(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/f8ae00773cc412a50dd41a6d9a159ddd").default>>;
    /** / */
    getHome(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/7dcc64ea27a08e70919893a0d3f70871").default>>;
    /** / -> /setting */
    getSettings(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/73bd677ed986ad2cb7004ceabfff4d38").default>>;
    /** / -> /photo_album */
    getPhotoAlbum(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/7e950e4f69a5f50013bba8a8fb6a3807").default>>;
    /** / -> /photo_album -> pull-to-refresh */
    getPhotoAlbumRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/53fb0ad32c13dd9a6e617b1158cc2d41").default>>;
    /** / -> /catalog_record */
    getCatalog(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/ff12098bad4989a813201b00ff22ac4e").default>>;
    /** / -> /catalog_record -> pull-to-refresh */
    getCatalogRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/60a6592c6ee8e47245020ae0d314d378").default>>;
    /** / -> /checkin */
    getCheckinHistory(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/5d0d1b45ebf4e324d0dae017d9df06d2").default>>;
    /** / -> /checkin */
    checkin(id: string): Promise<PersistedQueryResult<import("splatnet3-types/graphql/daffd9621680664dbf19d27e87484ac7").default>>;
    /** / -> /friends */
    getFriends(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/f0a8ebc384cf5fbac01e8085fbd7c898").default>>;
    /** / -> /friends -> pull-to-refresh */
    getFriendsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/aa2c979ad21a1100170ddf6afea3e2db").default>>;
    /** / -> /hero_record */
    getHeroRecords(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/fbee1a882371d4e3becec345636d7d1c").default>>;
    /** / -> /hero_record -> pull-to-refresh */
    getHeroRecordsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/4f9ae2b8f1d209a5f20302111b28f975").default>>;
    /** / -> /history_record */
    getHistoryRecords(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/d9246baf077b2a29b5f7aac321810a77").default>>;
    /** / -> /history_record -> pull-to-refresh */
    getHistoryRecordsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/67921048c4af8e2b201a12f13ad0ddae").default>>;
    /** / -> /schedule */
    getSchedules(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/d1f062c14f74f758658b2703a5799002").default>>;
    /** / -> /stage_record */
    getStageRecords(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/f08a932d533845dde86e674e03bbb7d3").default>>;
    /** / -> /stage_record -> pull-to-refresh */
    getStageRecordsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/2fb1b3fa2d40c9b5953ea1ae263e54c1").default>>;
    /** / -> /weapon_record */
    getWeaponRecords(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/5f279779e7081f2d14ae1ddca0db2b6e").default>>;
    /** / -> /weapon_record -> pull-to-refresh */
    getWeaponRecordsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/6961f618fcef440c81509b205465eeec").default>>;
    /** / -> /challenge */
    getChallengeHome(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/8a079214500148bf88a8fce1d7209b90").default>>;
    /** / -> /challenge -> pull-to-refresh */
    getChallengeHomeRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/34aedc79f96b8613501bba465295f779").default>>;
    /** / -> /challenge -> /challenge/{id} */
    getChallengeJourney(id: string): Promise<PersistedQueryResult<{
        challengeInfo: {
            currentPaintPoint: number;
        };
        journey: {
            __typename: string;
            id: string;
        } & {
            challenges: {
                id: string;
                challengeNumber: number;
                goalPoint: number;
                image: {
                    url: string;
                };
                isSupported: boolean;
                name: string;
            }[];
            desc: string;
            gratitude: unknown;
            image: {
                url: string;
            };
            name: string;
            reward: {
                id: string;
                gear: {
                    __typename: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
            };
            state: import("splatnet3-types/splatnet3").ChallengeState | "SUPPORTABLE";
            subName: string;
        } & {
            __typename: "ChallengeJourney";
        };
    }>>;
    /** / -> /challenge -> /challenge/{id} -> pull-to-refresh */
    getChallengeJourneyRefetch(id: string): Promise<PersistedQueryResult<{
        challengeInfo: {
            currentPaintPoint: number;
        };
        journey: {
            __typename: string;
            id: string;
        } & {
            challenges: {
                id: string;
                challengeNumber: number;
                goalPoint: number;
                image: {
                    url: string;
                };
                isSupported: boolean;
                name: string;
            }[];
            desc: string;
            gratitude: unknown;
            image: {
                url: string;
            };
            name: string;
            reward: {
                id: string;
                gear: {
                    __typename: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
            };
            state: import("splatnet3-types/splatnet3").ChallengeState | "SUPPORTABLE";
            subName: string;
        } & {
            __typename: "ChallengeJourney";
        };
    }>>;
    /** / -> /challenge -> /challenge/{id} -> /challenge/{id}/*s */
    getChallengeJourneyChallenges(id: string): Promise<PersistedQueryResult<{
        challengeHome: {
            currentPaintPoint: number;
        };
        journey: {
            __typename: string;
            id: string;
        } & {
            challenges: {
                id: string;
                challengeNumber: number;
                desc: string;
                goalPoint: number;
                image: {
                    url: string;
                };
                isSupported: boolean;
                name: string;
                reward: null;
            }[];
            subName: string;
        } & {
            __typename: "ChallengeJourney";
        };
    }>>;
    /** / -> /challenge -> /challenge/{id} -> /challenge/{id}/* -> pull-to-refresh */
    getChallengeJourneyChallengesRefetch(id: string): Promise<PersistedQueryResult<{
        challengeHome: {
            currentPaintPoint: number;
        };
        journey: {
            __typename: string;
            id: string;
        } & {
            challenges: {
                id: string;
                challengeNumber: number;
                desc: string;
                goalPoint: number;
                image: {
                    url: string;
                };
                isSupported: boolean;
                name: string;
                reward: null;
            }[];
            subName: string;
        } & {
            __typename: "ChallengeJourney";
        };
    }>>;
    /** / -> /challenge -> /challenge/{id} -> /challenge/{id}/* -> support */
    supportChallenge(id: string): Promise<PersistedQueryResult<import("splatnet3-types/graphql/991bace9e8c52d63084cd1570a97a5b4").default>>;
    /** / -> /fest_record */
    getFestRecords(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/44c76790b68ca0f3da87f2a3452de986").default>>;
    /** / -> /fest_record -> pull-to-refresh */
    getFestRecordsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/73b9837d0e4dd29bfa2f1a7d7ee0814a").default>>;
    /** / -> /fest_record/{id} */
    getFestDetail(id: string): Promise<PersistedQueryResult<{
        currentPlayer: {
            name: string;
            userIcon: {
                url: string;
            };
        };
        fest: {
            __typename: string;
            id: string;
        } & {
            endTime: string;
            image: {
                url: string;
            };
            isVotable: boolean;
            lang: string;
            myTeam: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                teamName: string;
            } | null;
            playerResult: {
                challengeContributionAverage: number | null;
                challengeContributionTotal: number | null;
                grade: string;
                horagai: number;
                maxFestPower: number | null;
                regularContributionAverage: number;
                regularContributionTotal: number;
                tricolorContributionAverage: number | null;
                tricolorContributionEnabled: boolean;
                tricolorContributionTotal: number | null;
            } | null;
            startTime: string;
            state: import("splatnet3-types/splatnet3").FestState | "SCHEDULED" | "FIRST_HALF" | "SECOND_HALF" | "CLOSED";
            teams: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                image: {
                    url: string;
                };
                myVoteState: import("splatnet3-types/splatnet3").FestVoteState | null;
                preVotes: {
                    totalCount: number;
                } | null;
                result: {
                    __typename: "FestTeamResult";
                    challengeContributionRatio: number;
                    horagaiRatio: number;
                    isChallengeContributionRatioTop: boolean;
                    isHoragaiRatioTop: boolean;
                    isRegularContributionRatioTop: boolean;
                    isTricolorContributionRatioTop: boolean | null;
                    isVoteRatioTop: boolean;
                    isWinner: boolean;
                    regularContributionRatio: number;
                    tricolorContributionRatio: number | null;
                    voteRatio: number;
                };
                role: import("splatnet3-types/splatnet3").FestTeamRole | "ATTACK" | "DEFENSE" | null;
                teamName: string;
                votes: {
                    totalCount: number;
                } | null;
            }[];
            title: string;
            undecidedVotes: {
                totalCount: number;
            } | null;
        } & {
            __typename: "Fest";
        };
    }>>;
    /** / -> /fest_record -> /fest_record/{id} -> pull-to-refresh */
    getFestDetailRefetch(id: string): Promise<PersistedQueryResult<{
        currentPlayer: {
            name: string;
            userIcon: {
                url: string;
            };
        };
        fest: {
            __typename: string;
            id: string;
        } & {
            endTime: string;
            image: {
                url: string;
            };
            isVotable: boolean;
            lang: string;
            myTeam: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                teamName: string;
            } | null;
            playerResult: {
                challengeContributionAverage: number | null;
                challengeContributionTotal: number | null;
                grade: string;
                horagai: number;
                maxFestPower: number | null;
                regularContributionAverage: number;
                regularContributionTotal: number;
                tricolorContributionAverage: number | null;
                tricolorContributionEnabled: boolean;
                tricolorContributionTotal: number | null;
            } | null;
            startTime: string;
            state: import("splatnet3-types/splatnet3").FestState | "SCHEDULED" | "FIRST_HALF" | "SECOND_HALF" | "CLOSED";
            teams: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                image: {
                    url: string;
                };
                myVoteState: import("splatnet3-types/splatnet3").FestVoteState | null;
                preVotes: {
                    totalCount: number;
                } | null;
                result: {
                    __typename: "FestTeamResult";
                    challengeContributionRatio: number;
                    horagaiRatio: number;
                    isChallengeContributionRatioTop: boolean;
                    isHoragaiRatioTop: boolean;
                    isRegularContributionRatioTop: boolean;
                    isTricolorContributionRatioTop: boolean | null;
                    isVoteRatioTop: boolean;
                    isWinner: boolean;
                    regularContributionRatio: number;
                    tricolorContributionRatio: number | null;
                    voteRatio: number;
                };
                role: import("splatnet3-types/splatnet3").FestTeamRole | "ATTACK" | "DEFENSE" | null;
                teamName: string;
                votes: {
                    totalCount: number;
                } | null;
            }[];
            title: string;
            undecidedVotes: {
                totalCount: number;
            } | null;
        } & {
            __typename: "Fest";
        };
    }>>;
    /** / -> /fest_record -> /fest_record/{id} - not closed -> /fest_record/voting_status/{id} */
    getFestVotingStatus(id: string): Promise<PersistedQueryResult<{
        fest: {
            __typename: string;
            id: string;
        } & {
            lang: string;
            teams: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                image: {
                    url: string;
                };
                preVotes: {
                    nodes: {
                        playerName: string;
                        userIcon: {
                            url: string;
                        };
                    }[];
                } | null;
                teamName: string;
                votes: {
                    nodes: {
                        playerName: string;
                        userIcon: {
                            url: string;
                        };
                    }[];
                } | null;
            }[];
            undecidedVotes: {
                nodes: {
                    playerName: string;
                    userIcon: {
                        url: string;
                    };
                }[];
            } | null;
        } & {
            __typename: "Fest";
        };
    }>>;
    /** / -> /fest_record -> /fest_record/{id} - not closed -> /fest_record/voting_status/{id} -> pull-to-refresh */
    getFestVotingStatusRefetch(id: string): Promise<PersistedQueryResult<{
        fest: {
            __typename: string;
            id: string;
        } & {
            lang: string;
            teams: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                image: {
                    url: string;
                };
                preVotes: {
                    nodes: {
                        playerName: string;
                        userIcon: {
                            url: string;
                        };
                    }[];
                } | null;
                teamName: string;
                votes: {
                    nodes: {
                        playerName: string;
                        userIcon: {
                            url: string;
                        };
                    }[];
                } | null;
            }[];
            undecidedVotes: {
                nodes: {
                    playerName: string;
                    userIcon: {
                        url: string;
                    };
                }[];
            } | null;
        } & {
            __typename: "Fest";
        };
    }>>;
    /** / -> /fest_record -> /fest_record/{id} - not closed -> /fest_record/voting_status/{id} - not voted in game */
    updateFestPoll(id: string): Promise<PersistedQueryResult<import("splatnet3-types/graphql/a2c742c840718f37488e0394cd6e1e08").default>>;
    /** / -> /fest_record -> /fest_record/{id} - closed -> /fest_record/ranking/{id} */
    getFestRanking(id: string): Promise<PersistedQueryResult<{
        fest: {
            __typename: string;
            id: string;
        } & {
            lang: string;
            teams: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                image: {
                    url: string;
                };
                result: {
                    rankingHolders: {
                        edges: {
                            cursor: string;
                            node: never; /** @internal */
                        }[];
                        pageInfo: {
                            endCursor: string;
                            hasNextPage: boolean;
                        };
                    };
                };
                teamName: string;
            }[];
        } & {
            __typename: "Fest";
        };
    }>>;
    /**
     * / -> /fest_record -> /fest_record/* - closed -> /fest_record/ranking/* -> scroll down
     *
     * @param {string} id FestTeam ID
     */
    getFestRankingPagination(id: string, cursor: string): Promise<PersistedQueryResult<{
        node: {
            __typename: string;
            id: string;
        } & {
            color: {
                r: number;
                g: number;
                b: number;
                a: number;
            };
            result: {
                rankingHolders: {
                    edges: {
                        cursor: string;
                        node: never;
                    }[];
                    pageInfo: {
                        endCursor: string;
                        hasNextPage: boolean;
                    };
                };
            };
            teamName: string;
        } & {
            __typename: "FestTeam";
        };
    }>>;
    /** / -> /x_ranking */
    getXRanking(region?: XRankingRegion | null): Promise<PersistedQueryResult<import("splatnet3-types/graphql/d771444f2584d938db8d10055599011d").default>>;
    /** / -> /x_ranking -> pull-to-refresh */
    getXRankingRefetch(region?: XRankingRegion | null): Promise<PersistedQueryResult<import("splatnet3-types/graphql/5149402597bd2531b4eea04692d8bfd5").default>>;
    /** / -> /x_ranking/{id}/{rule} */
    getXRankingDetail(id: string): Promise<PersistedQueryResult<import("splatnet3-types/graphql/d5e4924c05891208466fcba260d682e7").default>>;
    /** / -> /x_ranking/{id}/{rule} -> pull-to-refresh */
    getXRankingDetailRefetch(id: string): Promise<PersistedQueryResult<import("splatnet3-types/graphql/fb960404299958248b3c0a2fbb444c35").default>>;
    /** / -> /x_ranking/{id}/{rule} -> scroll down */
    getXRankingDetailPagination<T extends XRankingLeaderboardType, R extends XRankingLeaderboardRule>(id: string, type: T, rule: R, cursor: string): Promise<PersistedQueryResult<{
        0: {
            [XRankingLeaderboardRule.SPLAT_ZONES]: ResultTypes[RequestId.DetailTabViewXRankingArRefetchQuery];
            [XRankingLeaderboardRule.TOWER_CONTROL]: ResultTypes[RequestId.DetailTabViewXRankingLfRefetchQuery];
            [XRankingLeaderboardRule.RAINMAKER]: ResultTypes[RequestId.DetailTabViewXRankingGlRefetchQuery];
            [XRankingLeaderboardRule.CLAM_BLITZ]: ResultTypes[RequestId.DetailTabViewXRankingClRefetchQuery];
        };
        1: {
            [XRankingLeaderboardRule.SPLAT_ZONES]: ResultTypes[RequestId.DetailTabViewWeaponTopsArRefetchQuery];
            [XRankingLeaderboardRule.TOWER_CONTROL]: ResultTypes[RequestId.DetailTabViewWeaponTopsLfRefetchQuery];
            [XRankingLeaderboardRule.RAINMAKER]: ResultTypes[RequestId.DetailTabViewWeaponTopsGlRefetchQuery];
            [XRankingLeaderboardRule.CLAM_BLITZ]: ResultTypes[RequestId.DetailTabViewWeaponTopsClRefetchQuery];
        };
    }[T][R] extends infer T_1 ? T_1 extends {
        0: {
            [XRankingLeaderboardRule.SPLAT_ZONES]: ResultTypes[RequestId.DetailTabViewXRankingArRefetchQuery];
            [XRankingLeaderboardRule.TOWER_CONTROL]: ResultTypes[RequestId.DetailTabViewXRankingLfRefetchQuery];
            [XRankingLeaderboardRule.RAINMAKER]: ResultTypes[RequestId.DetailTabViewXRankingGlRefetchQuery];
            [XRankingLeaderboardRule.CLAM_BLITZ]: ResultTypes[RequestId.DetailTabViewXRankingClRefetchQuery];
        };
        1: {
            [XRankingLeaderboardRule.SPLAT_ZONES]: ResultTypes[RequestId.DetailTabViewWeaponTopsArRefetchQuery];
            [XRankingLeaderboardRule.TOWER_CONTROL]: ResultTypes[RequestId.DetailTabViewWeaponTopsLfRefetchQuery];
            [XRankingLeaderboardRule.RAINMAKER]: ResultTypes[RequestId.DetailTabViewWeaponTopsGlRefetchQuery];
            [XRankingLeaderboardRule.CLAM_BLITZ]: ResultTypes[RequestId.DetailTabViewWeaponTopsClRefetchQuery];
        };
    }[T][R] ? T_1 extends object ? T_1 : unknown : never : never>>;
    /** / -> /gesotown */
    getSaleGear(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/a43dd44899a09013bcfd29b4b13314ff").default>>;
    /** / -> /gesotown -> pull-to-refresh */
    getSaleGearRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/951cab295eafdbeccfc2e718d7a98646").default>>;
    /** / -> /gesotown -> /gesotown/{id} */
    getSaleGearDetail(id: string): Promise<PersistedQueryResult<{
        saleGear: {
            __typename: string;
            id: string;
        } & {
            gear: {
                __typename: string;
                additionalGearPowers: {
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
                brand: {
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                    usualGearPower: {
                        desc: string;
                        image: {
                            url: string;
                        };
                        isEmptySlot: boolean;
                        name: string;
                    };
                };
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    image: {
                        url: string;
                    };
                    name: string;
                };
            };
            isAlreadyOrdered: boolean;
            nextGear: {
                id: string;
            } | null;
            previousGear: {
                id: string;
            } | null;
            price: number;
            saleEndTime: string;
        } & {
            __typename: "SaleGear";
        };
    }>>;
    /** / -> /gesotown -> /gesotown/{id} -> order */
    orderSaleGear(id: string, force?: boolean): Promise<PersistedQueryResult<import("splatnet3-types/graphql/b79b7a101a243912754f72437e2ad7e5").default>>;
    /** / -> /my_outfits */
    getMyOutfits(): Promise<PersistedQueryResult<{
        currentPlayer: {
            clothingGear: {
                additionalGearPowers: {
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
                clothingGearId: number;
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    image: {
                        url: string;
                    };
                    name: string;
                };
            };
            headGear: {
                additionalGearPowers: {
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
                headGearId: number;
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    image: {
                        url: string;
                    };
                    name: string;
                };
            };
            shoesGear: {
                additionalGearPowers: {
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    image: {
                        url: string;
                    };
                    name: string;
                };
                shoesGearId: number;
            };
            weapon: {
                id: string;
                image: {
                    url: string;
                };
                name: string;
                specialWeapon: {
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                subWeapon: {
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                weaponId: number;
            };
        };
        myOutfits: {
            edges: {
                cursor: string;
                node: {
                    __typename: "MyOutfit";
                    id: string;
                    controlOptionConsole: {
                        cameraSpeedGyro: number;
                        cameraSpeedStick: number;
                        isEnableGyro: boolean;
                        isReverseLr: boolean;
                        isReverseUd: boolean;
                    };
                    controlOptionHandheld: {
                        cameraSpeedGyro: number;
                        cameraSpeedStick: number;
                        isEnableGyro: boolean;
                        isReverseLr: boolean;
                        isReverseUd: boolean;
                    }; /** @internal */
                    currentClothingGear: {
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        image: {
                            url: string;
                        };
                        name: string;
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    } & {
                        __isGear: "Gear";
                        __typename: "Gear";
                        additionalGearPowers: {
                            __typename: "GearPower";
                            gearPowerId: number;
                            power: number;
                        }[];
                        brand: {
                            __typename: "Brand";
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                        primaryGearPower: {
                            __typename: "GearPower";
                            gearPowerId: number;
                            power: number;
                        };
                        rarity: number;
                        stats: {
                            exp: number;
                        } | null;
                    } & {
                        headGearId: number;
                    } & {
                        clothingGearId: number;
                    } & {
                        shoesGearId: number;
                    } & {
                        __typename: "Gear";
                    };
                    currentHeadGear: {
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        image: {
                            url: string;
                        };
                        name: string;
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    } & {
                        __isGear: "Gear";
                        __typename: "Gear";
                        additionalGearPowers: {
                            __typename: "GearPower";
                            gearPowerId: number;
                            power: number;
                        }[];
                        brand: {
                            __typename: "Brand";
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                        primaryGearPower: {
                            __typename: "GearPower";
                            gearPowerId: number;
                            power: number;
                        };
                        rarity: number;
                        stats: {
                            exp: number;
                        } | null;
                    } & {
                        headGearId: number;
                    } & {
                        clothingGearId: number;
                    } & {
                        shoesGearId: number;
                    } & {
                        __typename: "Gear";
                    };
                    currentShoesGear: {
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        image: {
                            url: string;
                        };
                        name: string;
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    } & {
                        __isGear: "Gear";
                        __typename: "Gear";
                        additionalGearPowers: {
                            __typename: "GearPower";
                            gearPowerId: number;
                            power: number;
                        }[];
                        brand: {
                            __typename: "Brand";
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                        primaryGearPower: {
                            __typename: "GearPower";
                            gearPowerId: number;
                            power: number;
                        };
                        rarity: number;
                        stats: {
                            exp: number; /** / -> /catalog_record -> pull-to-refresh */
                        } | null;
                    } & {
                        headGearId: number;
                    } & {
                        clothingGearId: number;
                    } & {
                        shoesGearId: number; /** / -> /checkin */
                    } & {
                        __typename: "Gear";
                    };
                    currentWeapon: {
                        __typename: "Weapon";
                        id: string;
                        image: {
                            url: string;
                        };
                        name: string;
                        specialWeapon: {
                            __typename: "SpecialWeapon";
                            id: string; /** / -> /hero_record -> pull-to-refresh */
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                        stats: {
                            paint: number;
                        } | null;
                        subWeapon: {
                            __typename: "SubWeapon";
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                        weaponCategory: {
                            __typename: "WeaponCategory";
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                        weaponId: number;
                    };
                    index: number;
                };
            }[];
            pageInfo: {
                endCursor: string;
                hasNextPage: boolean;
            }; /** / -> /challenge -> /challenge/{id} */
        };
    }>>;
    /** / -> /my_outfits -> pull-to-refresh */
    getMyOutfitsRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/10db4e349f3123c56df14e3adec2ee6f").default<boolean>>>;
    /** / -> /my_outfits -> /my_outfits/{id} */
    getMyOutfitDetail(id: string): Promise<PersistedQueryResult<{
        myOutfit: {
            __typename: string;
            id: string;
        } & {
            controlOptionConsole: {
                cameraSpeedGyro: number;
                cameraSpeedStick: number;
                isEnableGyro: boolean;
                isReverseLr: boolean;
                isReverseUd: boolean;
            };
            controlOptionHandheld: {
                cameraSpeedGyro: number;
                cameraSpeedStick: number;
                isEnableGyro: boolean;
                isReverseLr: boolean;
                isReverseUd: boolean;
            };
            currentClothingGear: {
                __isGear: "Gear";
                __typename: "Gear";
                additionalGearPowers: {
                    __typename: "GearPower";
                    gearPowerId: number;
                    image: {
                        url: string;
                    };
                    name: string;
                    power: number;
                }[];
                brand: {
                    __typename: "Brand";
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    __typename: "GearPower";
                    gearPowerId: number;
                    image: {
                        url: string;
                    };
                    name: string;
                    power: number;
                };
                rarity: number;
                stats: {
                    exp: number;
                } | null;
            } & {
                headGearId: number;
            } & {
                clothingGearId: number;
            } & {
                shoesGearId: number;
            };
            currentHeadGear: {
                __isGear: "Gear";
                __typename: "Gear";
                additionalGearPowers: {
                    __typename: "GearPower";
                    gearPowerId: number;
                    image: {
                        url: string;
                    };
                    name: string;
                    power: number; /** NXAPI_SPLATNET3_UPGRADE_QUERIES=0 - never upgrade persisted query IDs (not recommended) */
                }[];
                brand: {
                    __typename: "Brand"; /** NXAPI_SPLATNET3_UPGRADE_QUERIES=1 - upgrade persisted query IDs that do not contain potentially breaking changes (not recommended) */
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    __typename: "GearPower";
                    gearPowerId: number;
                    image: {
                        url: string;
                    };
                    name: string;
                    power: number;
                };
                rarity: number;
                stats: {
                    exp: number;
                } | null;
            } & {
                headGearId: number;
            } & {
                clothingGearId: number;
            } & {
                shoesGearId: number;
            };
            currentShoesGear: {
                __isGear: "Gear";
                __typename: "Gear";
                additionalGearPowers: {
                    __typename: "GearPower"; /** @internal */
                    gearPowerId: number;
                    image: {
                        url: string;
                    };
                    name: string;
                    power: number;
                }[];
                brand: {
                    __typename: "Brand";
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                image: {
                    url: string;
                };
                name: string;
                primaryGearPower: {
                    __typename: "GearPower";
                    gearPowerId: number;
                    image: {
                        url: string;
                    };
                    name: string;
                    power: number;
                };
                rarity: number;
                stats: {
                    exp: number;
                } | null;
            } & {
                headGearId: number;
            } & {
                clothingGearId: number;
            } & {
                shoesGearId: number;
            };
            currentWeapon: {
                __typename: "Weapon";
                id: string;
                image: {
                    url: string;
                };
                name: string;
                specialWeapon: {
                    __typename: "SpecialWeapon";
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                stats: {
                    paint: number;
                } | null;
                subWeapon: {
                    __typename: "SubWeapon";
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                weaponCategory: {
                    __typename: "WeaponCategory";
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                weaponId: number;
            };
            index: number;
        } & {
            __typename: "MyOutfit";
        };
    }>>;
    /** / -> /my_outfits -> /my_outfits/{id / create} */
    getEquipmentFilters(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/d02ab22c9dccc440076055c8baa0fa7a").default>>;
    /** / -> /my_outfits -> /my_outfits/{id / create} */
    getEquipment(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/d29cd0c2b5e6bac90dd5b817914832f8").default>>;
    /** / -> /my_outfits -> /my_outfits/{id / create} */
    createOutfit(data: MyOutfitInput): Promise<PersistedQueryResult<import("splatnet3-types/graphql/31ff008ea218ffbe11d958a52c6f959f").default>>;
    /** / -> /my_outfits -> /my_outfits/{id / create} */
    updateOutfit(id: string, data: MyOutfitInput): Promise<PersistedQueryResult<import("splatnet3-types/graphql/bb809066282e7d659d3b9e9d4e46b43b").default>>;
    /** / -> /my_outfits [-> /my_outfits/{id}] -> share */
    shareOutfit(index: number, timezone_offset_minutes?: number): Promise<PersistedQueryResult<import("splatnet3-types/graphql/3ba5572efce5bebbd859fc2d269d223c").default>>;
    /** / -> /replay */
    getReplays(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/c8d9828642f6eac6894876026d3db450").default>>;
    /** / -> /replay -> pull-to-refetch */
    getReplaysRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/4e83edd3d0964716c6ab27b9d6acf17f").default>>;
    /** / -> /replay -> enter code */
    getReplaySearchResult(code: string): Promise<PersistedQueryResult<{
        replay: {
            id: string;
            historyDetail: {
                id: string;
                awards: {
                    name: string;
                }[];
                judgement: import("splatnet3-types/splatnet3").Judgement | "WIN" | "LOSE" | "EXEMPTED_LOSE" | "DEEMED_LOSE" | "DRAW";
                knockout: "WIN" | "LOSE" | import("splatnet3-types/splatnet3").JudgementKnockout | "NEITHER" | null;
                leagueMatch: {
                    leagueMatchEvent: {
                        id: string;
                        name: string;
                    } | null;
                } | null;
                myTeam: {
                    result: {
                        paintPoint: number | null;
                        score: number | null;
                    } | null;
                };
                playedTime: string;
                player: {
                    id: string;
                    clothingGear: {
                        image: {
                            url: string;
                        };
                        name: string;
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    festGrade: string | null;
                    headGear: {
                        image: {
                            url: string;
                        };
                        name: string;
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    shoesGear: {
                        image: {
                            url: string;
                        };
                        name: string;
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    weapon: {
                        id: string;
                        image: {
                            url: string;
                        };
                        name: string;
                    };
                } & {
                    __isPlayer: "Player";
                    byname: any;
                    name: any;
                    nameId: any;
                    nameplate: {
                        background: {
                            id: string;
                            image: {
                                url: string;
                            };
                            textColor: {
                                r: number;
                                g: number;
                                b: number;
                                a: number;
                            };
                        };
                        badges: ({
                            id: string;
                            image: {
                                url: string;
                            };
                        } | null)[];
                    } | null;
                };
                vsMode: {
                    id: string;
                    mode: string;
                    name: string;
                };
                vsRule: {
                    id: string;
                    name: string;
                };
                vsStage: {
                    id: string;
                    name: string;
                };
            };
            replayCode: string;
        };
    }>>;
    /** / -> /replay -> enter code -> download */
    reserveReplayDownload(id: string): Promise<PersistedQueryResult<import("splatnet3-types/graphql/87bff2b854168b496c2da8c0e7f3e5bc").default>>;
    /** / -> /history */
    getBattleHistoryCurrentPlayer(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/49dd00428fb8e9b4dde62f585c8de1e0").default>>;
    /** / -> /history */
    getLatestBattleHistories(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/0d90c7576f1916469b2ae69f64292c02").default>>;
    /** / -> /history -> /history/latest -> pull-to-refresh */
    getLatestBattleHistoriesRefetch(): Promise<PersistedQueryResult<LatestBattleHistoriesRefetchResult<true>>>;
    /** / -> /history */
    getRegularBattleHistories(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/3baef04b095ad8975ea679d722bc17de").default>>;
    /** / -> /history -> /history/regular -> pull-to-refresh */
    getRegularBattleHistoriesRefetch(): Promise<PersistedQueryResult<RegularBattleHistoriesRefetchResult<true>>>;
    /** / -> /history */
    getBankaraBattleHistories(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/0438ea6978ae8bd77c5d1250f4f84803").default>>;
    /** / -> /history -> /history/bankara -> pull-to-refresh */
    getBankaraBattleHistoriesRefetch(): Promise<PersistedQueryResult<BankaraBattleHistoriesRefetchResult<true>>>;
    /** / -> /history */
    getXBattleHistories(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/6796e3cd5dc3ebd51864dc709d899fc5").default>>;
    /** / -> /history -> /history/xmatch -> pull-to-refresh */
    getXBattleHistoriesRefetch(): Promise<PersistedQueryResult<XBattleHistoriesRefetchResult<true>>>;
    /** / -> /history */
    getPrivateBattleHistories(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/8e5ae78b194264a6c230e262d069bd28").default>>;
    /** / -> /history -> /history/private -> pull-to-refresh */
    getPrivateBattleHistoriesRefetch(): Promise<PersistedQueryResult<PrivateBattleHistoriesRefetchResult<true>>>;
    /** / -> /history -> /history/detail/{id} */
    getBattleHistoryDetail(id: string): Promise<PersistedQueryResult<{
        vsHistoryDetail: {
            __typename: string;
            id: string;
        } & {
            awards: {
                name: string;
                rank: import("splatnet3-types/splatnet3").AwardRank | "GOLD" | "SILVER";
            }[];
            bankaraMatch: {
                bankaraPower: {
                    power: unknown;
                };
                earnedUdemaePoint: number | null;
                mode: import("splatnet3-types/splatnet3").BankaraMatchMode | "CHALLENGE" | "OPEN";
            } | null;
            duration: number;
            festMatch: {
                contribution: number;
                dragonMatchType: import("splatnet3-types/splatnet3").DragonMatchType | "NORMAL" | "DECUPLE" | "DRAGON" | "DOUBLE_DRAGON";
                jewel: number;
                myFestPower: number | null;
            } | null;
            judgement: import("splatnet3-types/splatnet3").Judgement | "WIN" | "LOSE" | "EXEMPTED_LOSE" | "DEEMED_LOSE" | "DRAW";
            knockout: "WIN" | "LOSE" | import("splatnet3-types/splatnet3").JudgementKnockout | "NEITHER" | null;
            leagueMatch: {
                leagueMatchEvent: {
                    id: string;
                    name: string;
                } | null;
                myLeaguePower: number | null;
            } | null;
            myTeam: {
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                festStreakWinCount: number | null;
                festTeamName: string | null;
                festUniformBonusRate: number | null;
                festUniformName: string | null;
                judgement: import("splatnet3-types/splatnet3").Judgement | "WIN" | "LOSE" | "EXEMPTED_LOSE" | "DEEMED_LOSE" | "DRAW" | null;
                order: number;
                players: ({
                    id: string;
                    byname: string;
                    clothingGear: {
                        name: string;
                        thumbnailImage: {
                            url: string;
                        };
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        brand: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                            usualGearPower: {
                                desc: string;
                                image: {
                                    url: string;
                                };
                                isEmptySlot: boolean;
                                name: string;
                            };
                        };
                        originalImage: {
                            url: string;
                        };
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    crown: boolean;
                    festDragonCert: "DRAGON" | "DOUBLE_DRAGON" | import("splatnet3-types/splatnet3").FestDragonCert | "NONE";
                    headGear: {
                        name: string;
                        thumbnailImage: {
                            url: string;
                        };
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        brand: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                            usualGearPower: {
                                desc: string;
                                image: {
                                    url: string;
                                };
                                isEmptySlot: boolean;
                                name: string;
                            };
                        };
                        originalImage: {
                            url: string;
                        };
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    isMyself: boolean;
                    name: string;
                    paint: number;
                    result: {
                        assist: number;
                        death: number;
                        kill: number;
                        noroshiTry: number | null;
                        special: number;
                    } | null;
                    shoesGear: {
                        name: string;
                        thumbnailImage: {
                            url: string;
                        };
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        brand: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                            usualGearPower: {
                                desc: string; /** @private */
                                image: {
                                    url: string;
                                };
                                isEmptySlot: boolean;
                                name: string;
                            };
                        };
                        originalImage: {
                            url: string;
                        };
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    species: import("splatnet3-types/splatnet3").Species | "INKLING" | "OCTOLING";
                    weapon: {
                        id: string;
                        image: {
                            url: string;
                        };
                        image2d: {
                            url: string;
                        };
                        image2dThumbnail: {
                            url: string;
                        };
                        image3d: {
                            url: string;
                        };
                        image3dThumbnail: {
                            url: string;
                        };
                        name: string;
                        specialWeapon: {
                            id: string;
                            image: {
                                url: string;
                            };
                            maskingImage: {
                                height: number;
                                maskImageUrl: string;
                                overlayImageUrl: string;
                                width: number;
                            };
                            name: string;
                        };
                        subWeapon: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                } & {
                    __isPlayer: "Player";
                    nameId: any;
                    nameplate: {
                        background: {
                            id: string;
                            image: {
                                url: string;
                            };
                            textColor: {
                                r: number;
                                g: number;
                                b: number;
                                a: number;
                            };
                        };
                        badges: ({
                            id: string;
                            image: {
                                url: string;
                            };
                        } | null)[];
                    } | null;
                })[];
                result: {
                    noroshi: number | null;
                    paintRatio: number | null;
                    score: number | null;
                } | null;
                tricolorRole: "DEFENSE" | import("splatnet3-types/splatnet3").TricolourRole | "ATTACK_1" | "ATTACK_2" | null; /** / -> /checkin */
            };
            nextHistoryDetail: {
                id: string;
            } | null;
            otherTeams: {
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
                festStreakWinCount: number | null;
                festTeamName: string | null;
                festUniformName: string | null;
                judgement: import("splatnet3-types/splatnet3").Judgement | "WIN" | "LOSE" | "EXEMPTED_LOSE" | "DEEMED_LOSE" | "DRAW" | null;
                order: number;
                players: ({
                    id: string;
                    byname: string;
                    clothingGear: {
                        name: string;
                        thumbnailImage: {
                            url: string;
                        };
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        brand: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                            usualGearPower: {
                                desc: string;
                                image: {
                                    url: string;
                                };
                                isEmptySlot: boolean;
                                name: string;
                            };
                        };
                        originalImage: {
                            url: string;
                        };
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    crown: boolean;
                    festDragonCert: "DRAGON" | "DOUBLE_DRAGON" | import("splatnet3-types/splatnet3").FestDragonCert | "NONE";
                    headGear: {
                        name: string;
                        thumbnailImage: {
                            url: string;
                        };
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        brand: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                            usualGearPower: {
                                desc: string;
                                image: {
                                    url: string;
                                }; /** / -> /challenge -> /challenge/{id} -> /challenge/{id}/* -> support */
                                isEmptySlot: boolean;
                                name: string;
                            };
                        };
                        originalImage: {
                            url: string;
                        };
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    isMyself: boolean;
                    name: string;
                    paint: number;
                    result: {
                        assist: number;
                        death: number;
                        kill: number;
                        noroshiTry: number | null;
                        special: number;
                    } | null;
                    shoesGear: {
                        name: string;
                        thumbnailImage: {
                            url: string;
                        };
                    } & {
                        __isGear: "Gear";
                        additionalGearPowers: {
                            image: {
                                url: string;
                            };
                            name: string;
                        }[];
                        brand: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                            usualGearPower: {
                                desc: string;
                                image: {
                                    url: string;
                                };
                                isEmptySlot: boolean;
                                name: string;
                            };
                        };
                        originalImage: {
                            url: string;
                        };
                        primaryGearPower: {
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                    species: import("splatnet3-types/splatnet3").Species | "INKLING" | "OCTOLING";
                    weapon: {
                        id: string;
                        image: {
                            url: string;
                        };
                        image2d: {
                            url: string;
                        };
                        image2dThumbnail: {
                            url: string;
                        };
                        image3d: {
                            url: string;
                        };
                        image3dThumbnail: {
                            url: string;
                        }; /** / -> /x_ranking */
                        name: string;
                        specialWeapon: {
                            id: string;
                            image: {
                                url: string;
                            };
                            maskingImage: {
                                height: number;
                                maskImageUrl: string;
                                overlayImageUrl: string; /** / -> /x_ranking/{id}/{rule} -> pull-to-refresh */
                                width: number;
                            };
                            name: string;
                        };
                        subWeapon: {
                            id: string;
                            image: {
                                url: string;
                            };
                            name: string;
                        };
                    };
                } & {
                    __isPlayer: "Player";
                    nameId: any;
                    nameplate: {
                        background: {
                            id: string;
                            image: {
                                url: string;
                            };
                            textColor: {
                                r: number;
                                g: number;
                                b: number;
                                a: number;
                            };
                        };
                        badges: ({
                            id: string;
                            image: {
                                url: string;
                            };
                        } | null)[];
                    } | null;
                })[];
                result: {
                    noroshi: number | null;
                    paintRatio: number | null;
                    score: number | null;
                } | null;
                tricolorRole: "DEFENSE" | import("splatnet3-types/splatnet3").TricolourRole | "ATTACK_1" | "ATTACK_2" | null;
            }[];
            playedTime: string;
            player: {
                id: string;
                clothingGear: {
                    image: {
                        url: string;
                    };
                    name: string;
                } & {
                    __isGear: "Gear";
                    additionalGearPowers: {
                        image: {
                            url: string;
                        };
                        name: string;
                    }[];
                    brand: {
                        id: string;
                        image: {
                            url: string;
                        };
                        /** / -> /gesotown */
                        name: string;
                        usualGearPower: {
                            desc: string;
                            image: {
                                url: string;
                            };
                            isEmptySlot: boolean;
                            name: string;
                        };
                    };
                    originalImage: {
                        url: string;
                    };
                    primaryGearPower: {
                        image: {
                            url: string;
                        };
                        name: string;
                    };
                };
                headGear: {
                    image: {
                        /** / -> /my_outfits */
                        url: string; /** / -> /my_outfits */
                    };
                    name: string;
                } & {
                    __isGear: "Gear";
                    additionalGearPowers: {
                        image: {
                            url: string;
                        };
                        name: string;
                    }[];
                    brand: {
                        id: string;
                        image: {
                            url: string;
                        };
                        name: string;
                        usualGearPower: {
                            desc: string;
                            image: {
                                url: string;
                            };
                            isEmptySlot: boolean;
                            name: string;
                        };
                    };
                    originalImage: {
                        url: string;
                    };
                    primaryGearPower: {
                        image: {
                            url: string;
                        }; /** / -> /my_outfits -> /my_outfits/{id / create} */
                        name: string;
                    };
                };
                paint: number;
                shoesGear: {
                    image: {
                        url: string;
                    };
                    name: string;
                } & {
                    __isGear: "Gear";
                    additionalGearPowers: {
                        image: {
                            url: string;
                        };
                        name: string;
                    }[];
                    brand: {
                        id: string;
                        image: {
                            url: string;
                        };
                        name: string;
                        usualGearPower: {
                            desc: string;
                            image: {
                                url: string;
                            };
                            isEmptySlot: boolean;
                            name: string;
                        };
                    };
                    originalImage: {
                        url: string;
                    };
                    primaryGearPower: {
                        image: {
                            url: string;
                        };
                        /** / -> /history */
                        name: string;
                    };
                };
            } & {
                __isPlayer: "Player";
                byname: any;
                name: any;
                nameId: any;
                nameplate: {
                    background: {
                        id: string;
                        image: {
                            url: string;
                        };
                        textColor: {
                            r: number;
                            g: number;
                            b: number;
                            a: number;
                        };
                    };
                    badges: ({
                        id: string;
                        image: {
                            url: string;
                        };
                    } | null)[];
                } | null;
            };
            previousHistoryDetail: {
                id: string;
            } | null;
            vsMode: {
                id: string;
                mode: string;
            };
            vsRule: {
                id: string;
                name: string;
                rule: string;
            };
            vsStage: {
                id: string;
                image: {
                    url: string;
                };
                name: string;
            };
            xMatch: {
                lastXPower: number | null;
            } | null;
        } & {
            __typename: "VsHistoryDetail";
        };
    }>>;
    /** / -> /history -> /history/detail/{id} -> pull-to-refresh */
    getBattleHistoryDetailPagerRefetch(id: string): Promise<PersistedQueryResult<{
        vsHistoryDetail: {
            __typename: string;
            id: string;
        } & {
            nextHistoryDetail: {
                id: string;
            } | null;
            previousHistoryDetail: {
                id: string;
            } | null;
        } & {
            __typename: "VsHistoryDetail";
        };
    }>>;
    /** / -> /history -> /history/detail/* -> latest */
    getBattleHistoryLatest(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/0329c535a32f914fd44251be1f489e24").default>>;
    /** / -> /history -> /history/detail/* -> latest */
    getBattleHistoryPagerUpdateByVsMode(): Promise<PersistedQueryResult<{
        currentFest: {
            id: string;
            state: import("splatnet3-types/splatnet3").FestState | "SCHEDULED" | "FIRST_HALF" | "SECOND_HALF" | "CLOSED";
            teams: {
                id: string;
                color: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
            }[];
        };
        latestBattleHistories: {
            historyGroups: {
                nodes: {
                    historyDetails: {
                        nodes: {
                            id: string;
                            bankaraMatch: {
                                earnedUdemaePoint: number | null;
                            } | null;
                            judgement: import("splatnet3-types/splatnet3").Judgement | "WIN" | "LOSE" | "EXEMPTED_LOSE" | "DEEMED_LOSE" | "DRAW";
                            knockout: "WIN" | "LOSE" | import("splatnet3-types/splatnet3").JudgementKnockout | "NEITHER" | null;
                            myTeam: {
                                result: {
                                    paintPoint: number | null;
                                    score: number | null;
                                } | null;
                            };
                            nextHistoryDetail: {
                                id: string;
                            } | null;
                            player: {
                                id: string;
                                festGrade: string | null;
                                weapon: {
                                    id: string;
                                    image: {
                                        url: string;
                                    };
                                    name: string;
                                };
                            };
                            previousHistoryDetail: {
                                id: string;
                            } | null;
                            udemae: unknown;
                            vsMode: {
                                id: string;
                                mode: string;
                            };
                            vsRule: {
                                id: string;
                                name: string;
                            };
                            vsStage: {
                                id: string;
                                image: {
                                    url: string;
                                };
                                name: string;
                            };
                        }[];
                    };
                }[];
            };
            historyGroupsOnlyFirst: {
                nodes: {
                    historyDetails: {
                        nodes: {
                            id: string;
                            player: {
                                id: string;
                                weapon: {
                                    id: string;
                                    specialWeapon: {
                                        id: string;
                                        maskingImage: {
                                            height: number;
                                            maskImageUrl: string;
                                            overlayImageUrl: string;
                                            width: number;
                                        };
                                    };
                                };
                            };
                        }[];
                    };
                }[];
            };
            summary: {
                assistAverage: number;
                deathAverage: number;
                killAverage: number;
                lose: number;
                perUnitTimeMinute: number;
                specialAverage: number;
                win: number;
            };
        };
    }>>;
    /** / -> /coop */
    getCoopHistory(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/91b917becd2fa415890f5b47e15ffb15").default>>;
    /** / -> /coop */
    getCoopHistoryRefetch(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/50be9b694c7c6b99b7a383e494ec5258").default>>;
    /** / -> /coop -> /coop/{id} */
    getCoopHistoryDetail(id: string): Promise<PersistedQueryResult<{
        coopHistoryDetail: {
            __typename: string;
            id: string;
        } & {
            afterGrade: {
                id: string;
                name: string;
            } | null;
            afterGradePoint: number | null;
            bossResult: {
                boss: {
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                } | null;
                hasDefeatBoss: unknown;
            } | null;
            coopStage: {
                id: string;
                image: {
                    url: string;
                };
                name: string;
            };
            dangerRate: number;
            enemyResults: {
                defeatCount: number;
                enemy: {
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                };
                popCount: number;
                teamDefeatCount: number;
            }[];
            jobBonus: number | null;
            jobPoint: number | null;
            jobRate: number | null;
            jobScore: number | null;
            memberResults: {
                defeatEnemyCount: number;
                deliverCount: number;
                goldenAssistCount: number;
                goldenDeliverCount: number;
                player: {
                    id: string;
                    name: string;
                    species: import("splatnet3-types/splatnet3").Species | "INKLING" | "OCTOLING";
                    uniform: {
                        id: string;
                        image: {
                            url: string;
                        };
                        name: string;
                    };
                } & {
                    __isPlayer: "Player";
                    byname: any;
                    nameId: any;
                    nameplate: {
                        background: {
                            id: string;
                            image: {
                                url: string;
                            };
                            textColor: {
                                r: number;
                                g: number;
                                b: number;
                                a: number;
                            };
                        };
                        badges: ({
                            id: string;
                            image: {
                                url: string;
                            };
                        } | null)[];
                    } | null;
                };
                rescueCount: number;
                rescuedCount: number;
                specialWeapon: {
                    image: {
                        url: string;
                    };
                    name: string;
                    weaponId: number;
                } | null;
                weapons: {
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
            }[];
            myResult: {
                defeatEnemyCount: number;
                deliverCount: number;
                goldenAssistCount: number;
                goldenDeliverCount: number;
                player: {
                    id: string;
                    name: string;
                    species: import("splatnet3-types/splatnet3").Species | "INKLING" | "OCTOLING";
                    uniform: {
                        id: string;
                        image: {
                            url: string;
                        };
                        name: string;
                    };
                } & {
                    __isPlayer: "Player";
                    byname: any;
                    nameId: any;
                    nameplate: {
                        background: {
                            id: string;
                            image: {
                                url: string;
                            };
                            textColor: {
                                r: number;
                                g: number;
                                b: number;
                                a: number;
                            };
                        };
                        badges: ({
                            id: string;
                            image: {
                                url: string;
                            };
                        } | null)[];
                    } | null;
                };
                rescueCount: number;
                rescuedCount: number;
                specialWeapon: {
                    image: {
                        url: string;
                    };
                    name: string;
                    weaponId: number;
                } | null;
                weapons: {
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
            }; /** @private */
            nextHistoryDetail: {
                id: string;
            } | null;
            playedTime: string;
            previousHistoryDetail: {
                id: string;
            } | null;
            resultWave: number;
            rule: import("splatnet3-types/splatnet3").CoopRule | "REGULAR" | "BIG_RUN" | "TEAM_CONTEST";
            scale: {
                bronze: number;
                gold: number;
                silver: number;
            } | null;
            scenarioCode: unknown;
            smellMeter: number | null;
            waveResults: {
                deliverNorm: number | null;
                eventWave: {
                    id: string;
                    name: string;
                } | null;
                goldenPopCount: number;
                specialWeapons: {
                    id: string;
                    image: {
                        url: string;
                    };
                    name: string;
                }[];
                teamDeliverCount: number | null;
                waterLevel: number;
                waveNumber: number;
            }[];
            weapons: {
                image: {
                    url: string;
                };
                name: string;
            }[];
        } & {
            __typename: "CoopHistoryDetail";
        };
    }>>;
    /** / -> /coop -> /coop/{id} -> pull-to-refresh */
    getCoopHistoryDetailRefetch(id: string): Promise<PersistedQueryResult<{
        node: {
            __typename: string;
            id: string;
        } & {
            nextHistoryDetail: {
                id: string;
            } | null;
            previousHistoryDetail: {
                id: string;
            } | null;
        } & {
            __typename: "CoopHistoryDetail";
        };
    }>>;
    /** / -> /coop -> /coop/* -> latest */
    getCoopHistoryLatest(): Promise<PersistedQueryResult<import("splatnet3-types/graphql/eb947416660e0a7520549f6b9a8ffcd7").default>>;
    renewTokenWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<SplatNet3AuthData>;
    renewTokenWithWebServiceToken(webserviceToken: WebServiceToken, user: NintendoAccountUser): Promise<SplatNet3AuthData>;
    protected setTokenWithSavedToken(data: SplatNet3AuthData): void;
    static createWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<{
        splatnet: SplatNet3Api;
        data: SplatNet3AuthData;
    }>;
    static createWithSavedToken(data: SplatNet3AuthData): SplatNet3Api;
    static createWithCliTokenData(data: SplatNet3CliTokenData): SplatNet3Api;
    static loginWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<SplatNet3AuthData>;
    static loginWithWebServiceToken(webserviceToken: WebServiceToken, user: NintendoAccountUser): Promise<SplatNet3AuthData>;
}
export declare class SplatNet3ErrorResponse<T = unknown> extends ErrorResponse<T> {
}
export declare class SplatNet3AuthErrorResponse extends SplatNet3ErrorResponse {
    readonly code: SplatNet3AuthErrorCode;
    constructor(message: string, response: Response | globalThis.Response, body?: string | unknown | undefined, code?: SplatNet3AuthErrorCode);
}
type GraphQLResponseWithErrors = (GraphQLSuccessResponse & {
    errors: GraphQLError[];
}) | GraphQLErrorResponse;
export declare class SplatNet3GraphQLErrorResponse<Id extends string = string, 
/** @private */
_Variables extends Id extends KnownRequestId ? VariablesTypes[Id] : unknown = Id extends KnownRequestId ? VariablesTypes[Id] : unknown> extends SplatNet3ErrorResponse<GraphQLResponseWithErrors> {
    readonly request_id?: string | Id | undefined;
    readonly variables?: _Variables | undefined;
    constructor(message: string, response: Response | globalThis.Response, body?: string | GraphQLResponseWithErrors | undefined, request_id?: string | Id | undefined, variables?: _Variables | undefined);
    static from(response: Response, data: GraphQLResponseWithErrors, id: string, variables: unknown): SplatNet3GraphQLErrorResponse<string, unknown>;
}
export declare class SplatNet3GraphQLResourceNotFoundResponse<Id extends string = string, 
/** @private */
_Result extends Id extends KnownRequestId ? ResultTypes[Id] : unknown = Id extends KnownRequestId ? ResultTypes[Id] : unknown, 
/** @private */
_Variables extends Id extends KnownRequestId ? VariablesTypes[Id] : unknown = Id extends KnownRequestId ? VariablesTypes[Id] : unknown> extends SplatNet3ErrorResponse<PersistedQueryResult<_Result>> {
    readonly request_id?: string | Id | undefined;
    readonly variables?: _Variables | undefined;
    constructor(message: string, response: Response | globalThis.Response, body?: string | PersistedQueryResult<_Result> | undefined, request_id?: string | Id | undefined, variables?: _Variables | undefined);
    static from(message: string, data: PersistedQueryResult<any>): SplatNet3GraphQLResourceNotFoundResponse<any, any, any>;
}
export interface SplatNet3AuthData {
    webserviceToken: WebServiceToken;
    url: string;
    cookies: string | null;
    body: string;
    language: string;
    country: string;
    version: string;
    queries?: Partial<Record<string, [ /** new query ID *//** new query ID */ string, /** unsafe */ boolean] | null>>;
    bullet_token: BulletToken;
    created_at: number;
    /**
     * /api/bullet_tokens does not provide the token validity duration. Instead this assumes
     * the token is valid for 2 hours. GraphQL responses include the actual remaining time
     * in the x-bullettoken-remaining header.
     */
    expires_at: number;
    useragent: string;
}
export interface SplatNet3CliTokenData {
    bullet_token: string;
    expires_at: number;
    language: string;
    country: string;
    version: string;
    queries?: Partial<Record<string, [ /** new query ID *//** new query ID */ string, /** unsafe */ boolean] | null>>;
}
export declare enum XRankingRegion {
    /** Takoroka division */
    PACIFIC = "PACIFIC",
    /** Tentatek division */
    ATLANTIC = "ATLANTIC"
}
export declare enum XRankingLeaderboardType {
    X_RANKING = 0,
    WEAPON = 1
}
export declare enum XRankingLeaderboardRule {
    SPLAT_ZONES = 0,
    TOWER_CONTROL = 1,
    RAINMAKER = 2,
    CLAM_BLITZ = 3
}
export {};
