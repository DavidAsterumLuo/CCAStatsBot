import { Response } from 'undici';
import { ActiveEvent, Announcements, CurrentUser, Event, Friend, Presence, PresencePermissions, User, WebService, WebServiceToken, FriendCodeUser, FriendCodeUrl } from './coral-types.js';
import { ErrorResponse } from './util.js';
import { CoralApiInterface, CoralAuthData, PartialCoralAuthData, Result } from './coral.js';
import { NintendoAccountToken, NintendoAccountUser } from './na.js';
import { SavedToken } from '../common/auth/coral.js';
export default class ZncProxyApi implements CoralApiInterface {
    private url;
    token: string;
    useragent: string;
    constructor(url: string, token: string, useragent?: string);
    fetch<T = unknown>(url: string, method?: string, body?: string, headers?: object): Promise<import("./util.js").HasResponse<T, Response>>;
    call<T = unknown>(url: string, parameter?: {}): Promise<Result<T>>;
    getAnnouncements(): Promise<Result<Announcements>>;
    getFriendList(): Promise<Result<import("./util.js").HasResponse<{
        friends: Friend[];
    }, Response>>>;
    addFavouriteFriend(nsa_id: string): Promise<import("./coral.js").ResultData<{}>>;
    removeFavouriteFriend(nsa_id: string): Promise<import("./coral.js").ResultData<{}>>;
    getWebServices(): Promise<Result<WebService[]>>;
    getActiveEvent(): Promise<Result<ActiveEvent>>;
    getEvent(id: number): Promise<Result<Event>>;
    getUser(id: number): Promise<Result<User>>;
    getUserByFriendCode(friend_code: string, hash?: string): Promise<Result<FriendCodeUser>>;
    sendFriendRequest(nsa_id: string): Promise<Result<{}>>;
    getCurrentUser(): Promise<Result<CurrentUser>>;
    getFriendCodeUrl(): Promise<Result<FriendCodeUrl>>;
    getCurrentUserPermissions(): Promise<Result<{
        etag: string;
        permissions: {
            presence: PresencePermissions;
        };
    }>>;
    updateCurrentUserPermissions(to: PresencePermissions, from: PresencePermissions, etag: string): Promise<Result<{}>>;
    getWebServiceToken(id: number): Promise<Result<WebServiceToken>>;
    getToken(token: string, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    getTokenWithNintendoAccountToken(token: NintendoAccountToken, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    renewToken(): Promise<import("./util.js").HasResponse<SavedToken, Response>>;
    renewTokenWithNintendoAccountToken(token: NintendoAccountToken, user: NintendoAccountUser): Promise<PartialCoralAuthData>;
    protected setTokenWithSavedToken(data: CoralAuthData | PartialCoralAuthData): void;
    static createWithSessionToken(url: string, token: string): Promise<{
        nso: ZncProxyApi;
        data: import("./util.js").HasResponse<SavedToken, Response>;
    }>;
}
export declare class ZncProxyErrorResponse extends ErrorResponse {
}
export interface AuthToken {
    user: string;
    policy?: AuthPolicy;
    created_at: number;
}
export interface AuthPolicy {
    announcements?: boolean;
    list_friends?: boolean;
    list_friends_presence?: boolean;
    friend?: boolean;
    friend_presence?: boolean;
    webservices?: boolean;
    activeevent?: boolean;
    current_user?: boolean;
    current_user_presence?: boolean;
    friends?: string[];
    friends_presence?: string[];
}
export declare enum ZncPresenceEventStreamEvent {
    FRIEND_ONLINE = "0",
    FRIEND_OFFLINE = "1",
    FRIEND_TITLE_CHANGE = "2",
    FRIEND_TITLE_STATECHANGE = "3",
    PRESENCE_UPDATED = "4"
}
export type PresenceUrlResponse = Presence | {
    presence: Presence;
} | CurrentUser | {
    user: CurrentUser;
} | Friend | {
    friend: Friend;
};
export declare function getPresenceFromUrl(presence_url: string, useragent?: string): Promise<import("./util.js").HasResponse<readonly [Presence, CurrentUser | Friend | undefined, unknown], Response>>;
