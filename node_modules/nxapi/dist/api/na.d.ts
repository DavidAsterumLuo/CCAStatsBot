import { Response } from 'undici';
import { ErrorResponse, HasResponse } from './util.js';
import { JwtPayload } from '../util/jwt.js';
import { ErrorDescription, ErrorDescriptionSymbol, HasErrorDescription } from '../util/errors.js';
export declare class NintendoAccountSessionAuthorisation {
    readonly client_id: string;
    readonly authorise_url: string;
    readonly state: string;
    readonly verifier: string;
    readonly redirect_uri: string;
    readonly scope: string;
    protected constructor(client_id: string, scope: string | string[], authorise_url: string, state: string, verifier: string, redirect_uri?: string);
    getSessionToken(code: string, state?: string): Promise<HasResponse<NintendoAccountSessionToken, Response>>;
    getSessionToken(params: URLSearchParams): Promise<HasResponse<NintendoAccountSessionToken, Response>>;
    static create(client_id: string, scope: string | string[], 
    /** @internal */ redirect_uri?: string): NintendoAccountSessionAuthorisation;
}
export declare class NintendoAccountSessionAuthorisationError extends Error {
    readonly code: string;
    constructor(code: string, message?: string);
    static fromSearchParams(qs: URLSearchParams): NintendoAccountSessionAuthorisationError;
}
export declare function generateAuthData(client_id: string, scope: string | string[], redirect_uri?: string): {
    url: string;
    state: string;
    verifier: string;
    challenge: string;
};
export declare function getNintendoAccountSessionToken(code: string, verifier: string, client_id: string): Promise<HasResponse<NintendoAccountSessionToken, Response>>;
export declare function getNintendoAccountToken(token: string, client_id: string): Promise<HasResponse<NintendoAccountToken, Response>>;
export declare function getNintendoAccountUser(token: NintendoAccountToken): Promise<HasResponse<NintendoAccountUser, Response>>;
export interface NintendoAccountSessionToken {
    session_token: string;
    code: string;
}
export interface NintendoAccountSessionTokenJwtPayload extends JwtPayload {
    jti: number;
    typ: 'session_token';
    iss: 'https://accounts.nintendo.com';
    /** Unknown - scopes the token is valid for? */
    'st:scp': number[];
    /** Subject (Nintendo Account ID) */
    sub: string;
    exp: number;
    /** Audience (client ID) */
    aud: string;
    iat: number;
}
export interface NintendoAccountToken {
    scope: string[];
    token_type: 'Bearer';
    id_token: string;
    access_token?: string;
    expires_in: 900;
}
export interface NintendoAccountIdTokenJwtPayload extends JwtPayload {
    /** Subject (Nintendo Account ID) */
    sub: string;
    iat: number;
    exp: number;
    /** Audience (client ID) */
    aud: string;
    iss: 'https://accounts.nintendo.com';
    jti: string;
    at_hash: string;
    typ: 'id_token';
    country: string;
}
export interface NintendoAccountAccessTokenJwtPayload extends JwtPayload {
    iss: 'https://accounts.nintendo.com';
    jti: string;
    typ: 'token';
    /** Subject (Nintendo Account ID) */
    sub: string;
    iat: number;
    'ac:grt': number;
    'ac:scp': number[];
    exp: number;
    /** Audience (client ID) */
    aud: string;
}
export declare enum NintendoAccountScope {
    OPENID = "openid",
    OFFLINE = "offline",
    USER = "user",
    USER_BIRTHDAY = "user.birthday",
    USER_MII = "user.mii",
    USER_SCREENNAME = "user.screenName",
    USER_EMAIL = "user.email",
    USER_LINKS = "user.links[].id",
    USER_LINKS_NNID = "user.links.nintendoNetwork.id",
    USER_MEMBERSHIP = "user.membership",
    USER_WISHLIST = "user.wishlist",
    ESHOP_DEMO = "eshopDemo",
    ESHOP_DEVICE = "eshopDevice",
    ESHOP_PRICE = "eshopPrice",
    MISSIONSTATUS = "missionStatus",
    MISSIONSTATUS_PROGRESS = "missionStatus:progress",
    POINTWALLET = "pointWallet",
    USERNOTIFICATIONMESSAGE_ANYCLIENTS = "userNotificationMessage:anyClients",
    USERNOTIFICATIONMESSAGE_ANYCLIENTS_WRITE = "userNotificationMessage:anyClients:write",
    MOONUSER_ADMINISTRATION = "moonUser:administration",
    MOONDEVICE_CREATE = "moonDevice:create",
    MOONOWNEDDEVICE_ADMINISTRATION = "moonOwnedDevice:administration",
    MOONPARENTALCONTROLSETTING = "moonParentalControlSetting",
    MOONPARENTALCONTROLSETTING_UPDATE = "moonParentalControlSetting:update",
    MOONPARENTALCONTROLSETTINGSTATE = "moonParentalControlSettingState",
    MOONPAIRINGSTATE = "moonPairingState",
    MOONSMARTDEVICE_ADMINISTRATION = "moonSmartDevice:administration",
    MOONDAILYSUMMARY = "moonDailySummary",
    MOONMONTHLYSUMMARY = "moonMonthlySummary"
}
export declare enum NintendoAccountJwtScope {
    'openid' = 0,
    'offline' = 1,
    'user' = 8,
    'user.birthday' = 9,
    'user.mii' = 17,
    'user.screenName' = 23,
    'user.links.nintendoNetwork.id' = 31,
    'moonUser:administration' = 320,
    'moonDevice:create' = 321,
    'moonOwnedDevice:administration' = 325,
    'moonParentalControlSetting' = 322,
    'moonParentalControlSetting:update' = 323,
    'moonParentalControlSettingState' = 324,
    'moonPairingState' = 326,
    'moonSmartDevice:administration' = 327,
    'moonDailySummary' = 328,
    'moonMonthlySummary' = 329
}
export interface NintendoAccountUser {
    emailOptedIn: boolean;
    language: string;
    country: string;
    timezone: {
        name: string;
        id: string;
        utcOffsetSeconds: number;
        utcOffset: string;
    };
    region: null;
    nickname: string;
    clientFriendsOptedIn: boolean;
    mii: Mii | null;
    isChild: boolean;
    eachEmailOptedIn: {
        survey: {
            updatedAt: number;
            optedIn: boolean;
        };
        deals: {
            updatedAt: number;
            optedIn: boolean;
        };
    };
    updatedAt: number;
    candidateMiis: unknown[];
    id: string;
    createdAt: number;
    emailVerified: boolean;
    analyticsPermissions: {
        internalAnalysis: {
            updatedAt: number;
            permitted: boolean;
        };
        targetMarketing: {
            updatedAt: number;
            permitted: boolean;
        };
    };
    emailOptedInUpdatedAt: number;
    birthday: string;
    screenName: string;
    gender: string;
    analyticsOptedInUpdatedAt: number;
    analyticsOptedIn: boolean;
    clientFriendsOptedInUpdatedAt: number;
}
export interface Mii {
    favoriteColor: string;
    id: string;
    updatedAt: number;
    coreData: {
        '4': string;
    };
    clientId: '1cfe3a55ed8924d9';
    imageUriTemplate: string;
    storeData: {
        '3': string;
    };
    imageOrigin: string;
    etag: string;
    type: 'profile';
}
export interface NintendoAccountAuthError {
    error: string;
    error_description: string;
}
export interface NintendoAccountError {
    errorCode: string;
    detail: string;
    instance: string;
    title: string;
    status: number;
    type: string;
}
export declare class NintendoAccountAuthErrorResponse extends ErrorResponse<NintendoAccountAuthError> implements HasErrorDescription {
    get [ErrorDescriptionSymbol](): ErrorDescription | null;
}
export declare class NintendoAccountErrorResponse extends ErrorResponse<NintendoAccountError> {
}
