import { FormData, Response } from 'undici';
import { WebServiceToken } from './coral-types.js';
import { NintendoAccountUser } from './na.js';
import { ErrorResponse, HasResponse } from './util.js';
import { CoralApiInterface } from './coral.js';
import { WebServiceError, Users, AuthToken, UserProfile, Newspapers, Newspaper, Emoticons, Reaction, IslandProfile } from './nooklink-types.js';
export declare const NOOKLINK_WEBSERVICE_ID = 4953919198265344;
export declare const NOOKLINK_WEBSERVICE_URL = "https://web.sd.lp1.acbaa.srv.nintendo.net";
export declare const NOOKLINK_WEBSERVICE_USERAGENT = "Mozilla/5.0 (Linux; Android 8.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36";
export default class NooklinkApi {
    gtoken: string;
    useragent: string;
    readonly client_version: string;
    onTokenExpired: ((data?: WebServiceError, res?: Response) => Promise<NooklinkAuthData | void>) | null;
    protected _token_expired: boolean;
    protected constructor(gtoken: string, useragent: string, client_version?: string);
    fetch<T extends object>(url: string, method?: string, body?: string | FormData, headers?: object, 
    /** @internal */ _autoRenewToken?: boolean, 
    /** @internal */ _attempt?: number): Promise<HasResponse<T, Response>>;
    getUsers(): Promise<HasResponse<Users, Response>>;
    getAuthToken(user_id: string): Promise<HasResponse<AuthToken, Response>>;
    createUserClient(user_id: string): Promise<{
        nooklinkuser: NooklinkUserApi;
        data: NooklinkUserAuthData;
    }>;
    renewTokenWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<NooklinkAuthData>;
    renewTokenWithWebServiceToken(webserviceToken: WebServiceToken, user: NintendoAccountUser): Promise<NooklinkAuthData>;
    private setTokenWithSavedToken;
    static createWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<{
        nooklink: NooklinkApi;
        data: NooklinkAuthData;
    }>;
    static createWithSavedToken(data: NooklinkAuthData): NooklinkApi;
    static loginWithCoral(coral: CoralApiInterface, user: NintendoAccountUser): Promise<NooklinkAuthData>;
    static loginWithWebServiceToken(webserviceToken: WebServiceToken, user: NintendoAccountUser): Promise<NooklinkAuthData>;
}
export declare class NooklinkUserApi {
    user_id: string;
    auth_token: string;
    gtoken: string;
    useragent: string;
    language: string;
    readonly client_version: string;
    onTokenExpired: ((data?: WebServiceError, res?: Response) => Promise<NooklinkUserAuthData | PartialNooklinkUserAuthData | void>) | null;
    protected _token_expired: boolean;
    protected constructor(user_id: string, auth_token: string, gtoken: string, useragent: string, language?: string, client_version?: string);
    fetch<T extends object>(url: string, method?: string, body?: string | FormData, headers?: object, 
    /** @internal */ _autoRenewToken?: boolean, 
    /** @internal */ _attempt?: number): Promise<HasResponse<T, Response>>;
    getUserProfile(id?: string): Promise<HasResponse<UserProfile, Response>>;
    getIslandProfile(id: string): Promise<HasResponse<IslandProfile, Response>>;
    getNewspapers(): Promise<HasResponse<Newspapers, Response>>;
    getNewspaper(key: string): Promise<HasResponse<Newspaper, Response>>;
    getLatestNewspaper(): Promise<HasResponse<Newspaper, Response>>;
    postMessage(body: string, type: MessageType, destination_user_id?: string): Promise<HasResponse<object, Response>>;
    keyboard(message: string): Promise<HasResponse<object, Response>>;
    getEmoticons(): Promise<HasResponse<Emoticons, Response>>;
    reaction(reaction: Reaction): Promise<HasResponse<object, Response>>;
    getToken(client: NooklinkApi): Promise<PartialNooklinkUserAuthData>;
    renewToken(client: NooklinkApi): Promise<PartialNooklinkUserAuthData>;
    private setTokenWithSavedToken;
    static createWithSavedToken(data: NooklinkUserAuthData): NooklinkUserApi;
    static createWithCliTokenData(data: NooklinkUserCliTokenData): NooklinkUserApi;
}
export declare class NooklinkErrorResponse extends ErrorResponse<WebServiceError> {
}
export interface NooklinkAuthData {
    webserviceToken: WebServiceToken;
    url: string;
    cookies: string;
    body: string;
    gtoken: string;
    expires_at: number;
    useragent: string;
    version: string;
}
export interface NooklinkUserAuthData {
    gtoken: string;
    useragent: string;
    version: string;
    user_id: string;
    token: AuthToken;
    language: string;
}
export type PartialNooklinkUserAuthData = Pick<NooklinkUserAuthData, 'gtoken' | 'user_id' | 'token'>;
export interface NooklinkUserCliTokenData {
    gtoken: string;
    version: string;
    auth_token: string;
    expires_at: number;
    user_id: string;
    language: string;
}
export declare enum MessageType {
    KEYBOARD = "keyboard",
    EMOTICON = "emoticon"
}
