/// <reference types="yargs" />
import { CoopHistoryResult, LatestBattleHistoriesRefetchResult, LatestBattleHistoriesResult, RefetchableCoopHistory_CoopResultResult } from 'splatnet3-types/splatnet3';
import type { Arguments as ParentArguments } from '../splatnet3.js';
import { ArgumentsCamelCase, Argv, YargsArguments } from '../../util/yargs.js';
import SplatNet3Api, { PersistedQueryResult } from '../../api/splatnet3.js';
export declare const command = "dump-results [directory]";
export declare const desc = "Download all battle and coop results";
export declare function builder(yargs: Argv<ParentArguments>): import("yargs").Argv<{
    "data-path": string;
} & {
    "znc-proxy-url": string | undefined;
} & {
    "auto-update-session": boolean;
} & {
    directory: string | undefined;
} & {
    user: string | undefined;
} & {
    token: string | undefined;
} & {
    battles: boolean | undefined;
} & {
    coop: boolean | undefined;
} & {
    "include-history": boolean;
} & {
    "include-catalog": boolean;
}>;
type Arguments = YargsArguments<ReturnType<typeof builder>>;
export declare function handler(argv: ArgumentsCamelCase<Arguments>): Promise<void>;
export declare function dumpResults(splatnet: SplatNet3Api, directory: string, refresh?: LatestBattleHistoriesResult | boolean, latest_refetch?: PersistedQueryResult<LatestBattleHistoriesRefetchResult<true>>): Promise<{
    player: (import("splatnet3-types/splatnet3").GraphQLSuccessResponse<import("splatnet3-types/graphql/49dd00428fb8e9b4dde62f585c8de1e0").default> & import("../../api/splatnet3.js").PersistedQueryResultData) | null;
    battles: PersistedQueryResult<LatestBattleHistoriesRefetchResult<true>> | (import("splatnet3-types/splatnet3").GraphQLSuccessResponse<LatestBattleHistoriesResult> & import("../../api/splatnet3.js").PersistedQueryResultData);
    battles_regular: import("splatnet3-types/splatnet3").GraphQLSuccessResponse<import("splatnet3-types/graphql/3baef04b095ad8975ea679d722bc17de").default> & import("../../api/splatnet3.js").PersistedQueryResultData;
    battles_anarchy: import("splatnet3-types/splatnet3").GraphQLSuccessResponse<import("splatnet3-types/graphql/0438ea6978ae8bd77c5d1250f4f84803").default> & import("../../api/splatnet3.js").PersistedQueryResultData;
    battles_private: import("splatnet3-types/splatnet3").GraphQLSuccessResponse<import("splatnet3-types/graphql/8e5ae78b194264a6c230e262d069bd28").default> & import("../../api/splatnet3.js").PersistedQueryResultData;
    downloaded: string[];
}>;
export declare function dumpCoopResults(splatnet: SplatNet3Api, directory: string, refresh?: CoopHistoryResult | boolean, refetch?: PersistedQueryResult<RefetchableCoopHistory_CoopResultResult>): Promise<{
    results: PersistedQueryResult<CoopHistoryResult>;
    downloaded: string[];
}>;
export {};
