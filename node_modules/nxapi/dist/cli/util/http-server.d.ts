import { Request, RequestHandler, Response } from 'express';
export declare class HttpServer {
    retry_after: number;
    protected createApiRequestHandler(callback: (req: Request, res: Response) => Promise<{} | void>, auth?: boolean): (req: Request, res: Response) => Promise<void>;
    protected createApiMiddleware(callback: (req: Request, res: Response) => Promise<void>): RequestHandler;
    protected sendJsonResponse(res: Response, data: {}, status?: number): void;
    protected encodeJsonForResponse(data: unknown, space?: number): string;
    protected handleRequestError(req: Request, res: Response, err: unknown, retry_after?: number): void;
}
export declare class ResponseError extends Error {
    readonly status: number;
    readonly code: string;
    constructor(status: number, code: string, message?: string);
    sendResponse(req: Request, res: Response): void;
    sendEventStreamEvent(events: EventStreamResponse): void;
    toJSON(): {
        error: string;
        error_message: string;
    };
}
export declare class EventStreamResponse {
    readonly req: Request;
    readonly res: Response;
    json_replacer: ((key: string, value: unknown, data: unknown) => any) | null;
    private static id;
    readonly id: number;
    constructor(req: Request, res: Response);
    sendEvent(event: string | null, ...data: unknown[]): void;
    sendErrorEvent(err: unknown): void;
}
declare abstract class EventStreamField {
    abstract write(res: Response): void;
}
export declare class EventStreamLastEventId extends EventStreamField {
    readonly id: string;
    constructor(id: string);
    write(res: Response): void;
}
export declare class EventStreamRetryTime extends EventStreamField {
    readonly retry_ms: number;
    constructor(retry_ms: number);
    write(res: Response): void;
}
export declare class EventStreamRawData extends EventStreamField {
    readonly data: string;
    constructor(data: string);
    write(res: Response): void;
}
export {};
