/// <reference types="yargs" />
import persist from 'node-persist';
import type { Arguments as ParentArguments } from '../nso.js';
import { ArgumentsCamelCase, Argv, YargsArguments } from '../../util/yargs.js';
import { EmbeddedSplatNet2Monitor, NotificationManager } from '../../common/notify.js';
import { CurrentUser, Friend } from '../../api/coral-types.js';
export declare const command = "notify";
export declare const desc = "Show notifications when friends come online without starting Discord Rich Presence";
export declare function builder(yargs: Argv<ParentArguments>): import("yargs").Argv<{
    "data-path": string;
} & {
    "znc-proxy-url": string | undefined;
} & {
    user: string | undefined;
} & {
    token: string | undefined;
} & {
    "user-notifications": boolean;
} & {
    "friend-notifications": boolean;
} & {
    "update-interval": number;
} & {
    "splatnet2-monitor": boolean;
} & {
    "splatnet2-monitor-directory": string | undefined;
} & {
    "splatnet2-monitor-profile-image": boolean;
} & {
    "splatnet2-monitor-favourite-stage": string | undefined;
} & {
    "splatnet2-monitor-favourite-colour": string | undefined;
} & {
    "splatnet2-monitor-battles": boolean;
} & {
    "splatnet2-monitor-battle-summary-image": boolean;
} & {
    "splatnet2-monitor-battle-images": boolean;
} & {
    "splatnet2-monitor-coop": boolean;
} & {
    "splatnet2-monitor-update-interval": number;
} & {
    "splatnet2-auto-update-session": boolean;
}>;
type Arguments = YargsArguments<ReturnType<typeof builder>>;
export declare function handler(argv: ArgumentsCamelCase<Arguments>): Promise<void>;
export declare class TerminalNotificationManager extends NotificationManager {
    private readonly notifier;
    constructor(notifier: typeof import('node-notifier'));
    onFriendOnline(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onFriendOffline(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onFriendPlayingChangeTitle(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
    onFriendTitleStateChange(friend: CurrentUser | Friend, prev?: CurrentUser | Friend, naid?: string, ir?: boolean): void;
}
export declare function handleEnableSplatNet2Monitoring(argv: ArgumentsCamelCase<Arguments>, storage: persist.LocalStorage, token: string): () => Promise<EmbeddedSplatNet2Monitor>;
export {};
