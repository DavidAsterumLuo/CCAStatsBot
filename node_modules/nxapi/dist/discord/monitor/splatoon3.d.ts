import persist from 'node-persist';
import DiscordRPC from 'discord-rpc';
import { BankaraMatchMode, CoopRule, CoopSetting_schedule, DetailVotingStatusResult, FestTeam_schedule, FestTeam_votingStatus, Fest_schedule, FriendListResult, GraphQLSuccessResponse, StageScheduleResult, VsMode, VsSchedule_regular } from 'splatnet3-types/splatnet3';
import { Game } from '../../api/coral-types.js';
import SplatNet3Api from '../../api/splatnet3.js';
import { DiscordPresenceExternalMonitorsConfiguration } from '../../app/common/types.js';
import { Arguments } from '../../cli/nso/presence.js';
import { SavedBulletToken } from '../../common/auth/splatnet3.js';
import { ExternalMonitorPresenceInterface } from '../../common/presence.js';
import { EmbeddedLoop, LoopResult } from '../../util/loop.js';
import { ArgumentsCamelCase } from '../../util/yargs.js';
import { DiscordPresenceContext } from '../types.js';
type VsSetting_schedule = StageScheduleResult['regularSchedules']['nodes'][0]['regularMatchSetting'] | StageScheduleResult['bankaraSchedules']['nodes'][0]['bankaraMatchSettings'][0] | StageScheduleResult['eventSchedules']['nodes'][0]['leagueMatchSetting'] | StageScheduleResult['xSchedules']['nodes'][0]['xMatchSetting'] | StageScheduleResult['festSchedules']['nodes'][0]['festMatchSetting'];
export default class SplatNet3Monitor extends EmbeddedLoop {
    readonly discord_presence: ExternalMonitorPresenceInterface;
    protected config: SplatNet3MonitorConfig | null;
    update_interval: number;
    splatnet: SplatNet3Api | null;
    data: SavedBulletToken | null;
    cached_friends: GraphQLSuccessResponse<FriendListResult> | null;
    cached_schedules: GraphQLSuccessResponse<StageScheduleResult> | null;
    cached_voting_status: GraphQLSuccessResponse<DetailVotingStatusResult> | null;
    friend: FriendListResult['friends']['nodes'][0] | null;
    regular_schedule: VsSchedule_regular | null;
    vs_setting: VsSetting_schedule | null;
    coop_setting: CoopSetting_schedule | null;
    fest: Fest_schedule | null;
    fest_team_voting_status: FestTeam_votingStatus | null;
    fest_team: FestTeam_schedule | null;
    constructor(discord_presence: ExternalMonitorPresenceInterface, config: SplatNet3MonitorConfig | null);
    onUpdateConfig(config: SplatNet3MonitorConfig | null): boolean;
    get friend_nsaid(): string | null;
    init(): Promise<LoopResult | void>;
    update(): Promise<LoopResult.STOP | undefined>;
    handleError(err: Error): Promise<LoopResult>;
}
export declare function getSettingForVsMode(schedules: StageScheduleResult, vs_mode: Pick<VsMode, 'id' | 'mode'>): ({
    __isVsSetting: "VsSetting";
    __typename: "VsSetting";
    vsRule: {
        id: string;
        name: string;
        rule: string;
    };
    vsStages: {
        id: string;
        image: {
            url: string;
        };
        name: string;
        vsStageId: number;
    }[];
} & {
    mode: BankaraMatchMode | "CHALLENGE" | "OPEN";
}) | null | undefined;
export declare function getSettingForCoopRule(schedules: StageScheduleResult['coopGroupingSchedule'], coop_rule: CoopRule): {
    __typename: string;
    coopStage: {
        id: string;
        image: {
            url: string;
        };
        name: string;
        thumbnailImage: {
            url: string;
        };
    };
    weapons: {
        image: {
            url: string;
        };
        name: string;
    }[];
    __isCoopSetting: string;
} | null | undefined;
interface TimePeriod {
    startTime: string;
    endTime: string;
}
interface HasTimePeriods {
    timePeriods: TimePeriod[];
}
export declare function getSchedule<T extends TimePeriod | HasTimePeriods>(schedules: T[] | {
    nodes: T[];
}): T | null;
export interface SplatNet3MonitorConfig {
    storage: persist.LocalStorage;
    na_session_token: string;
    znc_proxy_url?: string;
    allow_fetch_token: boolean;
    friend_nsaid?: string;
}
export declare function getConfigFromArgv(argv: ArgumentsCamelCase<Arguments>, storage: persist.LocalStorage, na_session_token: string): SplatNet3MonitorConfig | null;
export declare function getConfigFromAppConfig(config: DiscordPresenceExternalMonitorsConfiguration, storage: persist.LocalStorage, na_session_token: string): SplatNet3MonitorConfig | null;
export declare function callback(activity: DiscordRPC.Presence, game: Game, context?: DiscordPresenceContext): void;
export {};
