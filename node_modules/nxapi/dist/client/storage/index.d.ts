import { NintendoAccountSessionTokenJwtPayload } from '../../api/na.js';
import { Jwt } from '../../util/jwt.js';
import { SavedToken as SavedNaToken } from '../na.js';
export interface StorageProvider {
    getSessionToken(na_id: string, client_id: string): Promise<string | null>;
    getSessionItem(na_id: string, session_id: string, key: string): Promise<string | null>;
    setSessionItem(na_id: string, session_id: string, key: string, value: string): Promise<void>;
}
type PromiseType<T extends Promise<any>> = T extends Promise<infer R> ? R : never;
type ConstructorType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : never;
export declare class Storage<T extends StorageProvider = StorageProvider> {
    readonly provider: T;
    constructor(provider: T);
    getSessionToken(na_id: string, client_id: string): Promise<string | null>;
    getSession<T>(na_id: string, client_id: string): Promise<NintendoAccountSession<T> | null>;
    getJsonSessionItem<T>(na_id: string, session_id: string, key: string): Promise<T | null>;
    setJsonSessionItem<T>(na_id: string, session_id: string, key: string, data: T): Promise<void>;
    static create<C extends {
        create(args: any): StorageProvider | Promise<StorageProvider>;
    } | {
        new (args: any): StorageProvider;
    }, R extends C extends {
        create(args: any): Promise<StorageProvider>;
    } ? Promise<Storage<PromiseType<ReturnType<C['create']> extends Promise<any> ? ReturnType<C['create']> : never>>> : C extends {
        create(args: any): StorageProvider;
    } ? Storage<ReturnType<C['create']> extends StorageProvider ? ReturnType<C['create']> : never> : C extends new (args: any) => StorageProvider ? Storage<ConstructorType<C>> : never>(constructor: C, ...args: C extends {
        create(args: any): any;
    } ? Parameters<C['create']> : C extends new (args: any) => any ? ConstructorParameters<C> : never): R;
}
export declare class NintendoAccountSession<T> {
    readonly storage: Storage;
    readonly token: string;
    readonly na_id: string;
    readonly client_id: string;
    readonly jwt: Jwt<NintendoAccountSessionTokenJwtPayload>;
    constructor(storage: Storage, token: string, na_id?: string, client_id?: string);
    get user_id(): string;
    get session_id(): string;
    getItem<T>(key: string): Promise<T | null>;
    setItem<T>(key: string, data: T): Promise<void>;
    getNintendoAccountToken(): Promise<SavedNaToken | null>;
    setNintendoAccountToken(data: SavedNaToken): Promise<void>;
    getAuthenticationData(): Promise<T | null>;
    setAuthenticationData(data: T): Promise<void>;
    getRateLimitAttempts(key: string): Promise<number[]>;
    setRateLimitAttempts(key: string, attempts: number[]): Promise<void>;
}
export {};
