import { CoralApiInterface, CoralAuthData, Result } from '../api/coral.js';
import { Announcements, Friends, Friend, GetActiveEventResult, WebServices } from '../api/coral-types.js';
import { NintendoAccountSession, Storage } from './storage/index.js';
import { ArgumentsCamelCase } from '../util/yargs.js';
import NintendoAccountOIDC from './na.js';
import Users from './users.js';
export interface SavedToken extends CoralAuthData {
    expires_at: number;
    proxy_url?: string;
}
export default class Coral {
    api: CoralApiInterface;
    data: CoralAuthData;
    announcements: Result<Announcements> | null;
    friends: Result<Friends> | null;
    webservices: Result<WebServices> | null;
    active_event: Result<GetActiveEventResult> | null;
    created_at: number;
    expires_at: number;
    promise: Map<string, Promise<void>>;
    delay_retry_after_error_until: number | null;
    updated: {
        announcements: number | null;
        friends: number | null;
        webservices: number | null;
        active_event: number | null;
    };
    delay_retry_after_error: number;
    update_interval: number;
    update_interval_announcements: number;
    onUpdatedWebServices: ((webservices: Result<WebServices>) => void) | null;
    constructor(api: CoralApiInterface, data: CoralAuthData, announcements?: Result<Announcements> | null, friends?: Result<Friends> | null, webservices?: Result<WebServices> | null, active_event?: Result<GetActiveEventResult> | null);
    private update;
    get user(): import("../api/coral-types.js").CurrentUser;
    getAnnouncements(): Promise<Result<Announcements>>;
    getFriends(): Promise<Friend[]>;
    getWebServices(): Promise<Result<WebServices>>;
    getActiveEvent(): Promise<(import("../api/coral-types.js").ActiveEvent & import("../api/coral.js").ResultData<GetActiveEventResult>) | null>;
    addFriend(nsa_id: string): Promise<{
        result: import("../api/coral.js").ResultData<{}>;
        friend: Friend | null;
    }>;
    static create(storage: Storage, na_id: string, proxy_url?: string): Promise<Coral>;
    static createWithSession(session: NintendoAccountSession<SavedToken>, oidc: NintendoAccountOIDC): Promise<Coral>;
    private static createWithSessionAuthenticate;
    static createWithProxy(session: NintendoAccountSession<SavedToken>, proxy_url: string): Promise<Coral>;
    private static createWithProxyAuthenticate;
    static createWithCoralApi(coral: CoralApiInterface, data: SavedToken, skip_fetch?: boolean): Promise<Coral>;
    static createWithUserStore(users: Users, id: string): Promise<Coral>;
}
export declare function getCoralClientFromArgv(storage: Storage, argv: ArgumentsCamelCase<{
    'data-path': string;
    user?: string;
    token?: string;
    'znc-proxy-url'?: string;
}>): Promise<Coral>;
