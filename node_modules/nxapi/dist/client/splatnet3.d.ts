import { ConfigureAnalyticsResult, CurrentFestResult, FriendListResult, Friend_friendList, HomeResult } from 'splatnet3-types/splatnet3';
import { NintendoAccountSession, Storage } from './storage/index.js';
import SplatNet3Api, { PersistedQueryResult, SplatNet3AuthData } from '../api/splatnet3.js';
import Coral, { SavedToken as SavedCoralToken } from './coral.js';
import Users from './users.js';
export interface SavedToken extends SplatNet3AuthData {
}
export default class SplatNet3 {
    api: SplatNet3Api;
    data: SplatNet3AuthData;
    configure_analytics: PersistedQueryResult<ConfigureAnalyticsResult> | null;
    current_fest: PersistedQueryResult<CurrentFestResult> | null;
    home: PersistedQueryResult<HomeResult> | null;
    created_at: number;
    expires_at: number;
    friends: PersistedQueryResult<FriendListResult> | null;
    promise: Map<string, Promise<void>>;
    updated: {
        configure_analytics: number | null;
        current_fest: number | null;
        home: number | null;
        friends: number | null;
        schedules: number | null;
    };
    update_interval: number;
    update_interval_schedules: number;
    constructor(api: SplatNet3Api, data: SplatNet3AuthData, configure_analytics?: PersistedQueryResult<ConfigureAnalyticsResult> | null, current_fest?: PersistedQueryResult<CurrentFestResult> | null, home?: PersistedQueryResult<HomeResult> | null);
    protected update(key: keyof SplatNet3['updated'], callback: () => Promise<void>, ttl: number): Promise<void>;
    getHome(): Promise<HomeResult>;
    getFriends(): Promise<Friend_friendList[]>;
    static create(storage: Storage, coral: Coral): Promise<SplatNet3>;
    static createWithSession(session: NintendoAccountSession<SavedCoralToken>, coral: Coral): Promise<SplatNet3>;
    private static createWithSessionAuthenticate;
    static createWithSplatNet3Api(splatnet: SplatNet3Api, data: SavedToken, skip_fetch?: boolean): Promise<SplatNet3>;
    static createWithUserStore(users: Users, id: string): Promise<SplatNet3>;
}
